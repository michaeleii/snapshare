{
    "version": 3,
    "checkpoint": {
        "stack": "organization/snapshare/michael",
        "latest": {
            "manifest": {
                "time": "2024-03-31T00:53:40.529679261-07:00",
                "magic": "53d474cd474879a14fbdd70515dc0019236ed0be15dd684675cc214682376482",
                "version": "v3.112.0"
            },
            "secrets_providers": {
                "type": "passphrase",
                "state": {
                    "salt": "v1:7OzAxK00aQ0=:v1:pWAZE917ilepbK2O:hTDT8BlkCpf32tMz7l/MkjvWvJbsww=="
                }
            },
            "resources": [
                {
                    "urn": "urn:pulumi:michael::snapshare::pulumi:pulumi:Stack::snapshare-michael",
                    "custom": false,
                    "type": "pulumi:pulumi:Stack",
                    "outputs": {
                        "_hints": {
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi": "https://7a3gm3zph1.execute-api.us-west-2.amazonaws.com",
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite::SnapshareWeb": "https://d12hp8ej84ufkl.cloudfront.net"
                        },
                        "_links": {
                            "SnapShareApi": {
                                "type": "sst.aws.ApiGatewayV2",
                                "url": "https://7a3gm3zph1.execute-api.us-west-2.amazonaws.com"
                            },
                            "SnapshareAssets": {
                                "name": "snapshare-michael-snapshareassets-wdocbksc",
                                "type": "sst.aws.Bucket"
                            },
                            "SnapshareWeb": {
                                "type": "sst.aws.StaticSite",
                                "url": "https://d12hp8ej84ufkl.cloudfront.net"
                            }
                        },
                        "_receivers": {
                            ".": {
                                "environment": {
                                    "VITE_API_URL": "https://7a3gm3zph1.execute-api.us-west-2.amazonaws.com",
                                    "VITE_KINDE_AUDIENCE": "snapshare-api-michael"
                                },
                                "links": []
                            },
                            "aws/functions/src/auth.handler": {
                                "environment": {
                                    "SST_APP": "snapshare",
                                    "SST_FUNCTION_ID": "SnapShareApiHandlerEsbd",
                                    "SST_STAGE": "michael",
                                    "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                                },
                                "links": []
                            },
                            "aws/functions/src/posts.handler": {
                                "environment": {
                                    "SST_APP": "snapshare",
                                    "SST_FUNCTION_ID": "SnapShareApiHandlerMahf",
                                    "SST_STAGE": "michael",
                                    "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                                },
                                "links": []
                            },
                            "aws/functions/src/s3.handler": {
                                "environment": {
                                    "BUCKET_NAME": "snapshare-michael-snapshareassets-wdocbksc",
                                    "SST_APP": "snapshare",
                                    "SST_FUNCTION_ID": "SnapShareApiHandlerNohf",
                                    "SST_STAGE": "michael",
                                    "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                                },
                                "links": [
                                    "SnapshareAssets"
                                ]
                            }
                        },
                        "_warps": {
                            "SnapShareApiHandlerEsbd": {
                                "functionID": "SnapShareApiHandlerEsbd",
                                "handler": "aws/functions/src/auth.handler",
                                "links": [],
                                "runtime": "nodejs20.x"
                            },
                            "SnapShareApiHandlerMahf": {
                                "functionID": "SnapShareApiHandlerMahf",
                                "handler": "aws/functions/src/posts.handler",
                                "links": [],
                                "runtime": "nodejs20.x"
                            },
                            "SnapShareApiHandlerMbkt": {
                                "functionID": "SnapShareApiHandlerMbkt",
                                "handler": "aws/functions/src/posts.handler",
                                "links": [],
                                "runtime": "nodejs20.x"
                            },
                            "SnapShareApiHandlerNohf": {
                                "functionID": "SnapShareApiHandlerNohf",
                                "handler": "aws/functions/src/s3.handler",
                                "links": [
                                    "SnapshareAssets"
                                ],
                                "runtime": "nodejs20.x"
                            },
                            "SnapShareApiHandlerVcsm": {
                                "functionID": "SnapShareApiHandlerVcsm",
                                "handler": "aws/functions/src/posts.handler",
                                "links": [],
                                "runtime": "nodejs20.x"
                            },
                            "SnapShareApiHandlerVhbb": {
                                "functionID": "SnapShareApiHandlerVhbb",
                                "handler": "aws/functions/src/posts.handler",
                                "links": [],
                                "runtime": "nodejs20.x"
                            }
                        }
                    },
                    "created": "2024-03-31T00:42:39.007623527Z",
                    "modified": "2024-03-31T00:42:39.007623527Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/runtime/stack.ts#36,23"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite::SnapshareWeb",
                    "custom": false,
                    "type": "sst:aws:StaticSite",
                    "outputs": {
                        "_metadata": {
                            "environment": {
                                "VITE_API_URL": "https://7a3gm3zph1.execute-api.us-west-2.amazonaws.com",
                                "VITE_KINDE_AUDIENCE": "snapshare-api-michael"
                            },
                            "path": ".",
                            "url": "https://d12hp8ej84ufkl.cloudfront.net"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::pulumi:pulumi:Stack::snapshare-michael",
                    "created": "2024-03-31T00:42:41.297728024Z",
                    "modified": "2024-03-31T00:42:41.297728024Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/static-site.ts#338,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "custom": false,
                    "type": "sst:aws:ApiGatewayV2",
                    "parent": "urn:pulumi:michael::snapshare::pulumi:pulumi:Stack::snapshare-michael",
                    "created": "2024-03-31T03:40:27.014975695Z",
                    "modified": "2024-03-31T03:40:27.014975695Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#325,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket::SnapshareWebAssets",
                    "custom": false,
                    "type": "sst:aws:Bucket",
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite::SnapshareWeb",
                    "created": "2024-03-31T00:42:42.252064951Z",
                    "modified": "2024-03-31T00:42:42.252064951Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/bucket.ts#299,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:Bucket::SnapshareAssets",
                    "custom": false,
                    "type": "sst:aws:Bucket",
                    "parent": "urn:pulumi:michael::snapshare::pulumi:pulumi:Stack::snapshare-michael",
                    "created": "2024-03-31T03:03:51.988559985Z",
                    "modified": "2024-03-31T03:03:51.988559985Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/bucket.ts#299,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2",
                    "custom": true,
                    "id": "eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "type": "pulumi:providers:aws",
                    "inputs": {
                        "defaultTags": "{\"tags\":{\"sst:app\":\"snapshare\",\"sst:stage\":\"michael\"}}",
                        "region": "us-west-2",
                        "skipCredentialsValidation": "false",
                        "skipMetadataApiCheck": "true",
                        "skipRegionValidation": "true",
                        "version": "6.28.2"
                    },
                    "outputs": {
                        "defaultTags": "{\"tags\":{\"sst:app\":\"snapshare\",\"sst:stage\":\"michael\"}}",
                        "region": "us-west-2",
                        "skipCredentialsValidation": "false",
                        "skipMetadataApiCheck": "true",
                        "skipRegionValidation": "true",
                        "version": "6.28.2"
                    },
                    "created": "2024-03-31T00:42:42.252816611Z",
                    "modified": "2024-03-31T00:42:42.252816611Z"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$aws:cloudfront/originAccessIdentity:OriginAccessIdentity::SnapshareWebOriginAccessIdentity",
                    "custom": true,
                    "id": "E4IQVGDM98XKI",
                    "type": "aws:cloudfront/originAccessIdentity:OriginAccessIdentity",
                    "inputs": {
                        "__defaults": [
                            "comment"
                        ],
                        "comment": ""
                    },
                    "outputs": {
                        "callerReference": "terraform-20240331004242400700000001",
                        "cloudfrontAccessIdentityPath": "origin-access-identity/cloudfront/E4IQVGDM98XKI",
                        "comment": "",
                        "etag": "E2SCGIOUWDYSOF",
                        "iamArn": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E4IQVGDM98XKI",
                        "id": "E4IQVGDM98XKI",
                        "s3CanonicalUserId": "7a575ec87b06b61051465d6b88e35c73618af917dcaebddba166151eecf6dc817c83994d889a190c554b915280e6667d"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite::SnapshareWeb",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "created": "2024-03-31T00:42:43.372476876Z",
                    "modified": "2024-03-31T00:42:43.372476876Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/static-site.ts#362,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMahf",
                    "custom": false,
                    "type": "sst:aws:Function",
                    "outputs": {
                        "_metadata": {
                            "handler": "aws/functions/src/posts.handler"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "created": "2024-03-31T03:41:40.400293223Z",
                    "modified": "2024-03-31T03:41:40.400293223Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#891,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVhbb",
                    "custom": false,
                    "type": "sst:aws:Function",
                    "outputs": {
                        "_metadata": {
                            "handler": "aws/functions/src/posts.handler"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "created": "2024-03-31T03:41:03.69079462Z",
                    "modified": "2024-03-31T03:41:03.69079462Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#891,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVcsm",
                    "custom": false,
                    "type": "sst:aws:Function",
                    "outputs": {
                        "_metadata": {
                            "handler": "aws/functions/src/posts.handler"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "created": "2024-03-31T03:41:03.669158368Z",
                    "modified": "2024-03-31T03:41:03.669158368Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#891,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerEsbd",
                    "custom": false,
                    "type": "sst:aws:Function",
                    "outputs": {
                        "_metadata": {
                            "handler": "aws/functions/src/auth.handler"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "created": "2024-03-31T03:54:33.100798484Z",
                    "modified": "2024-03-31T03:54:33.100798484Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#891,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMbkt",
                    "custom": false,
                    "type": "sst:aws:Function",
                    "outputs": {
                        "_metadata": {
                            "handler": "aws/functions/src/posts.handler"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "created": "2024-03-31T03:41:03.65033027Z",
                    "modified": "2024-03-31T03:41:03.65033027Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#891,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                    "custom": true,
                    "id": "7a3gm3zph1",
                    "type": "aws:apigatewayv2/api:Api",
                    "inputs": {
                        "__defaults": [
                            "apiKeySelectionExpression",
                            "routeSelectionExpression"
                        ],
                        "apiKeySelectionExpression": "$request.header.x-api-key",
                        "corsConfiguration": {
                            "__defaults": [],
                            "allowCredentials": false,
                            "allowHeaders": [
                                "*"
                            ],
                            "allowMethods": [
                                "*"
                            ],
                            "allowOrigins": [
                                "*"
                            ]
                        },
                        "name": "snapshare-michael-SnapShareApiApi",
                        "protocolType": "HTTP",
                        "routeSelectionExpression": "$request.method $request.path",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "apiEndpoint": "https://7a3gm3zph1.execute-api.us-west-2.amazonaws.com",
                        "apiKeySelectionExpression": "$request.header.x-api-key",
                        "arn": "arn:aws:apigateway:us-west-2::/apis/7a3gm3zph1",
                        "corsConfiguration": {
                            "allowCredentials": false,
                            "allowHeaders": [
                                "*"
                            ],
                            "allowMethods": [
                                "*"
                            ],
                            "allowOrigins": [
                                "*"
                            ],
                            "exposeHeaders": [],
                            "maxAge": 0
                        },
                        "description": "",
                        "disableExecuteApiEndpoint": false,
                        "executionArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1",
                        "id": "7a3gm3zph1",
                        "name": "snapshare-michael-SnapShareApiApi",
                        "protocolType": "HTTP",
                        "routeSelectionExpression": "$request.method $request.path",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "version": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "corsConfiguration": [],
                        "name": [],
                        "protocolType": []
                    },
                    "created": "2024-03-31T03:40:29.492336644Z",
                    "modified": "2024-03-31T03:40:29.492336644Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#376,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:cloudwatch/logGroup:LogGroup::SnapShareApiAccessLog",
                    "custom": true,
                    "id": "/aws/vendedlogs/apis/snapshare-michael-SnapShareApi",
                    "type": "aws:cloudwatch/logGroup:LogGroup",
                    "inputs": {
                        "__defaults": [
                            "skipDestroy"
                        ],
                        "name": "/aws/vendedlogs/apis/snapshare-michael-SnapShareApi",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:logs:us-west-2:257033689941:log-group:/aws/vendedlogs/apis/snapshare-michael-SnapShareApi",
                        "id": "/aws/vendedlogs/apis/snapshare-michael-SnapShareApi",
                        "kmsKeyId": "",
                        "logGroupClass": "STANDARD",
                        "name": "/aws/vendedlogs/apis/snapshare-michael-SnapShareApi",
                        "namePrefix": "",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "name": [],
                        "retentionInDays": []
                    },
                    "created": "2024-03-31T03:40:28.591179465Z",
                    "modified": "2024-03-31T03:40:28.591179465Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#392,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::pulumi:providers:random::default_4_15_0",
                    "custom": true,
                    "id": "b39aa075-8e8f-42d5-9875-f956832da550",
                    "type": "pulumi:providers:random",
                    "inputs": {
                        "version": "4.15.0"
                    },
                    "outputs": {
                        "version": "4.15.0"
                    },
                    "created": "2024-03-31T00:42:42.419733472Z",
                    "modified": "2024-03-31T00:42:42.419733472Z"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$random:index/randomId:RandomId::SnapshareWebAssetsId",
                    "custom": true,
                    "id": "IeP40HhZ",
                    "type": "random:index/randomId:RandomId",
                    "inputs": {
                        "byteLength": 6
                    },
                    "outputs": {
                        "b64Std": "IeP40HhZ",
                        "b64Url": "IeP40HhZ",
                        "byteLength": 6,
                        "dec": "37263015704665",
                        "hex": "21e3f8d07859",
                        "id": "IeP40HhZ"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket::SnapshareWebAssets",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:random::default_4_15_0::b39aa075-8e8f-42d5-9875-f956832da550",
                    "propertyDependencies": {
                        "byteLength": []
                    },
                    "created": "2024-03-31T00:42:42.434705248Z",
                    "modified": "2024-03-31T00:42:42.434705248Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/bucket.ts#322,26"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:Bucket$random:index/randomId:RandomId::SnapshareAssetsId",
                    "custom": true,
                    "id": "WkFe9fUB",
                    "type": "random:index/randomId:RandomId",
                    "inputs": {
                        "byteLength": 6
                    },
                    "outputs": {
                        "b64Std": "WkFe9fUB",
                        "b64Url": "WkFe9fUB",
                        "byteLength": 6,
                        "dec": "99236812551425",
                        "hex": "5a415ef5f501",
                        "id": "WkFe9fUB"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:Bucket::SnapshareAssets",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:random::default_4_15_0::b39aa075-8e8f-42d5-9875-f956832da550",
                    "propertyDependencies": {
                        "byteLength": []
                    },
                    "created": "2024-03-31T03:03:53.26520708Z",
                    "modified": "2024-03-31T03:03:53.26520708Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/bucket.ts#322,26"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerMahfLogGroup",
                    "custom": true,
                    "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMahfFunction",
                    "type": "aws:cloudwatch/logGroup:LogGroup",
                    "inputs": {
                        "__defaults": [
                            "skipDestroy"
                        ],
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:logs:us-west-2:257033689941:log-group:/aws/lambda/snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "kmsKeyId": "",
                        "logGroupClass": "STANDARD",
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "namePrefix": "",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMahf",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "name": [],
                        "retentionInDays": []
                    },
                    "created": "2024-03-31T03:41:41.197212923Z",
                    "modified": "2024-03-31T03:41:41.197212923Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1377,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerMahfRole",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerMahfRole-uswest2",
                    "type": "aws:iam/role:Role",
                    "inputs": {
                        "__defaults": [
                            "forceDetachPolicies",
                            "maxSessionDuration",
                            "path"
                        ],
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "forceDetachPolicies": false,
                        "inlinePolicies": [
                            {
                                "__defaults": [],
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerMahfRole-uswest2",
                        "path": "/",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerMahfRole-uswest2",
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "createDate": "2024-03-31T03:41:41Z",
                        "description": "",
                        "forceDetachPolicies": false,
                        "id": "snapshare-michael-SnapShareApiHandlerMahfRole-uswest2",
                        "inlinePolicies": [
                            {
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerMahfRole-uswest2",
                        "namePrefix": "",
                        "path": "/",
                        "permissionsBoundary": "",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "uniqueId": "AROATXWDG3NKZK4W6FSAF"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMahf",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "assumeRolePolicy": [],
                        "inlinePolicies": [],
                        "managedPolicyArns": [],
                        "name": []
                    },
                    "created": "2024-03-31T03:41:42.179650009Z",
                    "modified": "2024-03-31T03:41:42.179650009Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1241,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerVhbbLogGroup",
                    "custom": true,
                    "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVhbbFunction",
                    "type": "aws:cloudwatch/logGroup:LogGroup",
                    "inputs": {
                        "__defaults": [
                            "skipDestroy"
                        ],
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:logs:us-west-2:257033689941:log-group:/aws/lambda/snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "kmsKeyId": "",
                        "logGroupClass": "STANDARD",
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "namePrefix": "",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVhbb",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "name": [],
                        "retentionInDays": []
                    },
                    "created": "2024-03-31T03:41:04.176734222Z",
                    "modified": "2024-03-31T03:41:04.176734222Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1377,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerVhbbRole",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerVhbbRole-uswest2",
                    "type": "aws:iam/role:Role",
                    "inputs": {
                        "__defaults": [
                            "forceDetachPolicies",
                            "maxSessionDuration",
                            "path"
                        ],
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "forceDetachPolicies": false,
                        "inlinePolicies": [
                            {
                                "__defaults": [],
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerVhbbRole-uswest2",
                        "path": "/",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerVhbbRole-uswest2",
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "createDate": "2024-03-31T03:41:04Z",
                        "description": "",
                        "forceDetachPolicies": false,
                        "id": "snapshare-michael-SnapShareApiHandlerVhbbRole-uswest2",
                        "inlinePolicies": [
                            {
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerVhbbRole-uswest2",
                        "namePrefix": "",
                        "path": "/",
                        "permissionsBoundary": "",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "uniqueId": "AROATXWDG3NK2HD5JQUEK"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVhbb",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "assumeRolePolicy": [],
                        "inlinePolicies": [],
                        "managedPolicyArns": [],
                        "name": []
                    },
                    "created": "2024-03-31T03:41:05.096431218Z",
                    "modified": "2024-03-31T03:41:05.096431218Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1241,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerEsbdRole",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerEsbdRole-uswest2",
                    "type": "aws:iam/role:Role",
                    "inputs": {
                        "__defaults": [
                            "forceDetachPolicies",
                            "maxSessionDuration",
                            "path"
                        ],
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "forceDetachPolicies": false,
                        "inlinePolicies": [
                            {
                                "__defaults": [],
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerEsbdRole-uswest2",
                        "path": "/",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerEsbdRole-uswest2",
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "createDate": "2024-03-31T03:54:33Z",
                        "description": "",
                        "forceDetachPolicies": false,
                        "id": "snapshare-michael-SnapShareApiHandlerEsbdRole-uswest2",
                        "inlinePolicies": [
                            {
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerEsbdRole-uswest2",
                        "namePrefix": "",
                        "path": "/",
                        "permissionsBoundary": "",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "uniqueId": "AROATXWDG3NKSIPDWBE7Z"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerEsbd",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "assumeRolePolicy": [],
                        "inlinePolicies": [],
                        "managedPolicyArns": [],
                        "name": []
                    },
                    "created": "2024-03-31T03:54:34.574690806Z",
                    "modified": "2024-03-31T03:54:34.574690806Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1241,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerEsbdLogGroup",
                    "custom": true,
                    "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerEsbdFunction",
                    "type": "aws:cloudwatch/logGroup:LogGroup",
                    "inputs": {
                        "__defaults": [
                            "skipDestroy"
                        ],
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:logs:us-west-2:257033689941:log-group:/aws/lambda/snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "kmsKeyId": "",
                        "logGroupClass": "STANDARD",
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "namePrefix": "",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerEsbd",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "name": [],
                        "retentionInDays": []
                    },
                    "created": "2024-03-31T03:54:33.667894933Z",
                    "modified": "2024-03-31T03:54:33.667894933Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1377,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerVcsmLogGroup",
                    "custom": true,
                    "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVcsmFunction",
                    "type": "aws:cloudwatch/logGroup:LogGroup",
                    "inputs": {
                        "__defaults": [
                            "skipDestroy"
                        ],
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:logs:us-west-2:257033689941:log-group:/aws/lambda/snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "kmsKeyId": "",
                        "logGroupClass": "STANDARD",
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "namePrefix": "",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVcsm",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "name": [],
                        "retentionInDays": []
                    },
                    "created": "2024-03-31T03:41:04.112097065Z",
                    "modified": "2024-03-31T03:41:04.112097065Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1377,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerVcsmRole",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerVcsmRole-uswest2",
                    "type": "aws:iam/role:Role",
                    "inputs": {
                        "__defaults": [
                            "forceDetachPolicies",
                            "maxSessionDuration",
                            "path"
                        ],
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "forceDetachPolicies": false,
                        "inlinePolicies": [
                            {
                                "__defaults": [],
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerVcsmRole-uswest2",
                        "path": "/",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerVcsmRole-uswest2",
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "createDate": "2024-03-31T03:41:04Z",
                        "description": "",
                        "forceDetachPolicies": false,
                        "id": "snapshare-michael-SnapShareApiHandlerVcsmRole-uswest2",
                        "inlinePolicies": [
                            {
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerVcsmRole-uswest2",
                        "namePrefix": "",
                        "path": "/",
                        "permissionsBoundary": "",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "uniqueId": "AROATXWDG3NK4A7XUNLSB"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVcsm",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "assumeRolePolicy": [],
                        "inlinePolicies": [],
                        "managedPolicyArns": [],
                        "name": []
                    },
                    "created": "2024-03-31T03:41:05.041302674Z",
                    "modified": "2024-03-31T03:41:05.041302674Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1241,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerMbktLogGroup",
                    "custom": true,
                    "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMbktFunction",
                    "type": "aws:cloudwatch/logGroup:LogGroup",
                    "inputs": {
                        "__defaults": [
                            "skipDestroy"
                        ],
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:logs:us-west-2:257033689941:log-group:/aws/lambda/snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "kmsKeyId": "",
                        "logGroupClass": "STANDARD",
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "namePrefix": "",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMbkt",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "name": [],
                        "retentionInDays": []
                    },
                    "created": "2024-03-31T03:41:04.112000165Z",
                    "modified": "2024-03-31T03:41:04.112000165Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1377,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerMbktRole",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerMbktRole-uswest2",
                    "type": "aws:iam/role:Role",
                    "inputs": {
                        "__defaults": [
                            "forceDetachPolicies",
                            "maxSessionDuration",
                            "path"
                        ],
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "forceDetachPolicies": false,
                        "inlinePolicies": [
                            {
                                "__defaults": [],
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerMbktRole-uswest2",
                        "path": "/",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerMbktRole-uswest2",
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "createDate": "2024-03-31T03:41:04Z",
                        "description": "",
                        "forceDetachPolicies": false,
                        "id": "snapshare-michael-SnapShareApiHandlerMbktRole-uswest2",
                        "inlinePolicies": [
                            {
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerMbktRole-uswest2",
                        "namePrefix": "",
                        "path": "/",
                        "permissionsBoundary": "",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "uniqueId": "AROATXWDG3NK6JN75LYVH"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMbkt",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "assumeRolePolicy": [],
                        "inlinePolicies": [],
                        "managedPolicyArns": [],
                        "name": []
                    },
                    "created": "2024-03-31T03:41:05.02602967Z",
                    "modified": "2024-03-31T03:41:05.02602967Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1241,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/authorizer:Authorizer::SnapShareApiAuthorizerUeta",
                    "custom": true,
                    "id": "d4dfuy",
                    "type": "aws:apigatewayv2/authorizer:Authorizer",
                    "inputs": {
                        "__defaults": [],
                        "apiId": "7a3gm3zph1",
                        "authorizerType": "JWT",
                        "identitySources": [
                            "$request.header.Authorization"
                        ],
                        "jwtConfiguration": {
                            "__defaults": [],
                            "audiences": [
                                "snapshare-api-michael"
                            ],
                            "issuer": "https://snapshare.kinde.com"
                        },
                        "name": "snapshare-michael-SnapShareApiAuthorizerUeta"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "authorizerCredentialsArn": "",
                        "authorizerPayloadFormatVersion": "",
                        "authorizerResultTtlInSeconds": 0,
                        "authorizerType": "JWT",
                        "authorizerUri": "",
                        "enableSimpleResponses": false,
                        "id": "d4dfuy",
                        "identitySources": [
                            "$request.header.Authorization"
                        ],
                        "jwtConfiguration": {
                            "audiences": [
                                "snapshare-api-michael"
                            ],
                            "issuer": "https://snapshare.kinde.com"
                        },
                        "name": "snapshare-michael-SnapShareApiAuthorizerUeta"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "authorizerType": [],
                        "identitySources": [],
                        "jwtConfiguration": [],
                        "name": []
                    },
                    "created": "2024-03-31T03:50:20.747712135Z",
                    "modified": "2024-03-31T03:50:20.747712135Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/apigatewayv2/authorizer.ts#183,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/stage:Stage::SnapShareApiStage",
                    "custom": true,
                    "id": "$default",
                    "type": "aws:apigatewayv2/stage:Stage",
                    "inputs": {
                        "__defaults": [],
                        "accessLogSettings": {
                            "__defaults": [],
                            "destinationArn": "arn:aws:logs:us-west-2:257033689941:log-group:/aws/vendedlogs/apis/snapshare-michael-SnapShareApi",
                            "format": "{\"requestTime\":\"\\\"$context.requestTime\\\"\",\"requestId\":\"\\\"$context.requestId\\\"\",\"httpMethod\":\"\\\"$context.httpMethod\\\"\",\"path\":\"\\\"$context.path\\\"\",\"routeKey\":\"\\\"$context.routeKey\\\"\",\"status\":\"$context.status\",\"responseLatency\":\"$context.responseLatency\",\"integrationRequestId\":\"\\\"$context.integration.requestId\\\"\",\"integrationStatus\":\"\\\"$context.integration.status\\\"\",\"integrationLatency\":\"\\\"$context.integration.latency\\\"\",\"integrationServiceStatus\":\"\\\"$context.integration.integrationStatus\\\"\",\"ip\":\"\\\"$context.identity.sourceIp\\\"\",\"userAgent\":\"\\\"$context.identity.userAgent\\\"\"}"
                        },
                        "apiId": "7a3gm3zph1",
                        "autoDeploy": true,
                        "name": "$default",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "accessLogSettings": {
                            "destinationArn": "arn:aws:logs:us-west-2:257033689941:log-group:/aws/vendedlogs/apis/snapshare-michael-SnapShareApi",
                            "format": "{\"requestTime\":\"\\\"$context.requestTime\\\"\",\"requestId\":\"\\\"$context.requestId\\\"\",\"httpMethod\":\"\\\"$context.httpMethod\\\"\",\"path\":\"\\\"$context.path\\\"\",\"routeKey\":\"\\\"$context.routeKey\\\"\",\"status\":\"$context.status\",\"responseLatency\":\"$context.responseLatency\",\"integrationRequestId\":\"\\\"$context.integration.requestId\\\"\",\"integrationStatus\":\"\\\"$context.integration.status\\\"\",\"integrationLatency\":\"\\\"$context.integration.latency\\\"\",\"integrationServiceStatus\":\"\\\"$context.integration.integrationStatus\\\"\",\"ip\":\"\\\"$context.identity.sourceIp\\\"\",\"userAgent\":\"\\\"$context.identity.userAgent\\\"\"}"
                        },
                        "apiId": "7a3gm3zph1",
                        "arn": "arn:aws:apigateway:us-west-2::/apis/7a3gm3zph1/stages/$default",
                        "autoDeploy": true,
                        "clientCertificateId": "",
                        "defaultRouteSettings": {
                            "dataTraceEnabled": false,
                            "detailedMetricsEnabled": false,
                            "loggingLevel": "",
                            "throttlingBurstLimit": 0,
                            "throttlingRateLimit": 0
                        },
                        "deploymentId": "",
                        "description": "",
                        "executionArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/$default",
                        "id": "$default",
                        "invokeUrl": "https://7a3gm3zph1.execute-api.us-west-2.amazonaws.com/",
                        "name": "$default",
                        "routeSettings": [],
                        "stageVariables": {},
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:cloudwatch/logGroup:LogGroup::SnapShareApiAccessLog"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "accessLogSettings": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:cloudwatch/logGroup:LogGroup::SnapShareApiAccessLog"
                        ],
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "autoDeploy": [],
                        "name": []
                    },
                    "created": "2024-03-31T03:40:30.52064993Z",
                    "modified": "2024-03-31T03:40:30.52064993Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#405,7"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket",
                    "custom": true,
                    "id": "snapshare-michael-snapshareassets-wdocbksc",
                    "type": "aws:s3/bucketV2:BucketV2",
                    "inputs": {
                        "__defaults": [],
                        "bucket": "snapshare-michael-snapshareassets-wdocbksc",
                        "forceDestroy": true,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":1200000000000,\"delete\":3600000000000,\"read\":1200000000000,\"update\":1200000000000}}",
                        "accelerationStatus": "",
                        "arn": "arn:aws:s3:::snapshare-michael-snapshareassets-wdocbksc",
                        "bucket": "snapshare-michael-snapshareassets-wdocbksc",
                        "bucketDomainName": "snapshare-michael-snapshareassets-wdocbksc.s3.amazonaws.com",
                        "bucketPrefix": "",
                        "bucketRegionalDomainName": "snapshare-michael-snapshareassets-wdocbksc.s3.us-west-2.amazonaws.com",
                        "corsRules": [],
                        "forceDestroy": true,
                        "grants": [
                            {
                                "id": "31802eef99b6b48482b9c727f9a82745cdd27367534eb6e39e6a58ee6e2f27f8",
                                "permissions": [
                                    "FULL_CONTROL"
                                ],
                                "type": "CanonicalUser",
                                "uri": ""
                            }
                        ],
                        "hostedZoneId": "Z3BJ6K6RIION7M",
                        "id": "snapshare-michael-snapshareassets-wdocbksc",
                        "lifecycleRules": [],
                        "loggings": [],
                        "objectLockConfiguration": null,
                        "objectLockEnabled": false,
                        "policy": "",
                        "region": "us-west-2",
                        "replicationConfigurations": [],
                        "requestPayer": "BucketOwner",
                        "serverSideEncryptionConfigurations": [
                            {
                                "rules": [
                                    {
                                        "applyServerSideEncryptionByDefaults": [
                                            {
                                                "kmsMasterKeyId": "",
                                                "sseAlgorithm": "AES256"
                                            }
                                        ],
                                        "bucketKeyEnabled": false
                                    }
                                ]
                            }
                        ],
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "versionings": [
                            {
                                "enabled": false,
                                "mfaDelete": false
                            }
                        ],
                        "websites": []
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:Bucket::SnapshareAssets",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$random:index/randomId:RandomId::SnapshareAssetsId"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$random:index/randomId:RandomId::SnapshareAssetsId"
                        ],
                        "forceDestroy": []
                    },
                    "created": "2024-03-31T03:03:55.237218501Z",
                    "modified": "2024-03-31T03:03:55.237218501Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/bucket.ts#336,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket",
                    "custom": true,
                    "id": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                    "type": "aws:s3/bucketV2:BucketV2",
                    "inputs": {
                        "__defaults": [],
                        "bucket": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "forceDestroy": true,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":1200000000000,\"delete\":3600000000000,\"read\":1200000000000,\"update\":1200000000000}}",
                        "accelerationStatus": "",
                        "arn": "arn:aws:s3:::snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "bucket": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "bucketDomainName": "snapshare-michael-snapsharewebassets-hbnbdxnx.s3.amazonaws.com",
                        "bucketPrefix": "",
                        "bucketRegionalDomainName": "snapshare-michael-snapsharewebassets-hbnbdxnx.s3.us-west-2.amazonaws.com",
                        "corsRules": [],
                        "forceDestroy": true,
                        "grants": [
                            {
                                "id": "31802eef99b6b48482b9c727f9a82745cdd27367534eb6e39e6a58ee6e2f27f8",
                                "permissions": [
                                    "FULL_CONTROL"
                                ],
                                "type": "CanonicalUser",
                                "uri": ""
                            }
                        ],
                        "hostedZoneId": "Z3BJ6K6RIION7M",
                        "id": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "lifecycleRules": [],
                        "loggings": [],
                        "objectLockConfiguration": null,
                        "objectLockEnabled": false,
                        "policy": "",
                        "region": "us-west-2",
                        "replicationConfigurations": [],
                        "requestPayer": "BucketOwner",
                        "serverSideEncryptionConfigurations": [
                            {
                                "rules": [
                                    {
                                        "applyServerSideEncryptionByDefaults": [
                                            {
                                                "kmsMasterKeyId": "",
                                                "sseAlgorithm": "AES256"
                                            }
                                        ],
                                        "bucketKeyEnabled": false
                                    }
                                ]
                            }
                        ],
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "versionings": [
                            {
                                "enabled": false,
                                "mfaDelete": false
                            }
                        ],
                        "websites": []
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket::SnapshareWebAssets",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$random:index/randomId:RandomId::SnapshareWebAssetsId"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$random:index/randomId:RandomId::SnapshareWebAssetsId"
                        ],
                        "forceDestroy": []
                    },
                    "created": "2024-03-31T00:42:44.056587242Z",
                    "modified": "2024-03-31T00:42:44.056587242Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/bucket.ts#336,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMahfFunction",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerMahfFunction",
                    "type": "aws:lambda/function:Function",
                    "inputs": {
                        "__defaults": [
                            "packageType",
                            "publish",
                            "reservedConcurrentExecutions",
                            "skipDestroy"
                        ],
                        "architectures": [
                            "x86_64"
                        ],
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "description": "SnapShareApi route DELETE /posts/{id} (live)",
                        "environment": {
                            "__defaults": [],
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerMahf",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "handler": "bootstrap",
                        "loggingConfig": {
                            "__defaults": [
                                "applicationLogLevel",
                                "systemLogLevel"
                            ],
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMahfFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerMahfRole-uswest2",
                        "runtime": "provided.al2023",
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":600000000000,\"update\":600000000000}}",
                        "architectures": [
                            "x86_64"
                        ],
                        "arn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "codeSigningConfigArn": "",
                        "deadLetterConfig": null,
                        "description": "SnapShareApi route DELETE /posts/{id} (live)",
                        "environment": {
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerMahf",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "ephemeralStorage": {
                            "size": 512
                        },
                        "fileSystemConfig": null,
                        "handler": "bootstrap",
                        "id": "snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "imageConfig": null,
                        "imageUri": "",
                        "invokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMahfFunction/invocations",
                        "kmsKeyArn": "",
                        "lastModified": "2024-03-31T07:00:09.000+0000",
                        "layers": [],
                        "loggingConfig": {
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMahfFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "qualifiedArn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMahfFunction:$LATEST",
                        "qualifiedInvokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMahfFunction:$LATEST/invocations",
                        "replacementSecurityGroupIds": [],
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerMahfRole-uswest2",
                        "runtime": "provided.al2023",
                        "signingJobArn": "",
                        "signingProfileVersionArn": "",
                        "skipDestroy": false,
                        "snapStart": null,
                        "sourceCodeHash": "SwU3FC42clOQShUMaX6uh8ABJ4UCZO1BIVdmPSnqw4w=",
                        "sourceCodeSize": 6428900,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20,
                        "tracingConfig": {
                            "mode": "PassThrough"
                        },
                        "version": "$LATEST",
                        "vpcConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMahf",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerMahfLogGroup",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerMahfRole"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "architectures": [],
                        "code": [],
                        "description": [],
                        "environment": [],
                        "handler": [],
                        "loggingConfig": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerMahfLogGroup"
                        ],
                        "memorySize": [],
                        "name": [],
                        "role": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerMahfRole"
                        ],
                        "runtime": [],
                        "timeout": []
                    },
                    "created": "2024-03-31T03:42:01.507753409Z",
                    "modified": "2024-03-31T07:00:15.037129939Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1390,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVhbbFunction",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerVhbbFunction",
                    "type": "aws:lambda/function:Function",
                    "inputs": {
                        "__defaults": [
                            "packageType",
                            "publish",
                            "reservedConcurrentExecutions",
                            "skipDestroy"
                        ],
                        "architectures": [
                            "x86_64"
                        ],
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "description": "SnapShareApi route POST /posts (live)",
                        "environment": {
                            "__defaults": [],
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerVhbb",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "handler": "bootstrap",
                        "loggingConfig": {
                            "__defaults": [
                                "applicationLogLevel",
                                "systemLogLevel"
                            ],
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVhbbFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerVhbbRole-uswest2",
                        "runtime": "provided.al2023",
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":600000000000,\"update\":600000000000}}",
                        "architectures": [
                            "x86_64"
                        ],
                        "arn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "codeSigningConfigArn": "",
                        "deadLetterConfig": null,
                        "description": "SnapShareApi route POST /posts (live)",
                        "environment": {
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerVhbb",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "ephemeralStorage": {
                            "size": 512
                        },
                        "fileSystemConfig": null,
                        "handler": "bootstrap",
                        "id": "snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "imageConfig": null,
                        "imageUri": "",
                        "invokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVhbbFunction/invocations",
                        "kmsKeyArn": "",
                        "lastModified": "2024-03-31T07:00:09.000+0000",
                        "layers": [],
                        "loggingConfig": {
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVhbbFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "qualifiedArn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVhbbFunction:$LATEST",
                        "qualifiedInvokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVhbbFunction:$LATEST/invocations",
                        "replacementSecurityGroupIds": [],
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerVhbbRole-uswest2",
                        "runtime": "provided.al2023",
                        "signingJobArn": "",
                        "signingProfileVersionArn": "",
                        "skipDestroy": false,
                        "snapStart": null,
                        "sourceCodeHash": "SwU3FC42clOQShUMaX6uh8ABJ4UCZO1BIVdmPSnqw4w=",
                        "sourceCodeSize": 6428900,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20,
                        "tracingConfig": {
                            "mode": "PassThrough"
                        },
                        "version": "$LATEST",
                        "vpcConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVhbb",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerVhbbLogGroup",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerVhbbRole"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "architectures": [],
                        "code": [],
                        "description": [],
                        "environment": [],
                        "handler": [],
                        "loggingConfig": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerVhbbLogGroup"
                        ],
                        "memorySize": [],
                        "name": [],
                        "role": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerVhbbRole"
                        ],
                        "runtime": [],
                        "timeout": []
                    },
                    "created": "2024-03-31T03:41:30.319091699Z",
                    "modified": "2024-03-31T07:00:15.034306125Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1390,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerEsbdFunction",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerEsbdFunction",
                    "type": "aws:lambda/function:Function",
                    "inputs": {
                        "__defaults": [
                            "packageType",
                            "publish",
                            "reservedConcurrentExecutions",
                            "skipDestroy"
                        ],
                        "architectures": [
                            "x86_64"
                        ],
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "description": "SnapShareApi route POST /register (live)",
                        "environment": {
                            "__defaults": [],
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerEsbd",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "handler": "bootstrap",
                        "loggingConfig": {
                            "__defaults": [
                                "applicationLogLevel",
                                "systemLogLevel"
                            ],
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerEsbdFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerEsbdRole-uswest2",
                        "runtime": "provided.al2023",
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":600000000000,\"update\":600000000000}}",
                        "architectures": [
                            "x86_64"
                        ],
                        "arn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "codeSigningConfigArn": "",
                        "deadLetterConfig": null,
                        "description": "SnapShareApi route POST /register (live)",
                        "environment": {
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerEsbd",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "ephemeralStorage": {
                            "size": 512
                        },
                        "fileSystemConfig": null,
                        "handler": "bootstrap",
                        "id": "snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "imageConfig": null,
                        "imageUri": "",
                        "invokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerEsbdFunction/invocations",
                        "kmsKeyArn": "",
                        "lastModified": "2024-03-31T07:00:09.000+0000",
                        "layers": [],
                        "loggingConfig": {
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerEsbdFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "qualifiedArn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerEsbdFunction:$LATEST",
                        "qualifiedInvokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerEsbdFunction:$LATEST/invocations",
                        "replacementSecurityGroupIds": [],
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerEsbdRole-uswest2",
                        "runtime": "provided.al2023",
                        "signingJobArn": "",
                        "signingProfileVersionArn": "",
                        "skipDestroy": false,
                        "snapStart": null,
                        "sourceCodeHash": "SwU3FC42clOQShUMaX6uh8ABJ4UCZO1BIVdmPSnqw4w=",
                        "sourceCodeSize": 6428900,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20,
                        "tracingConfig": {
                            "mode": "PassThrough"
                        },
                        "version": "$LATEST",
                        "vpcConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerEsbd",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerEsbdLogGroup",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerEsbdRole"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "architectures": [],
                        "code": [],
                        "description": [],
                        "environment": [],
                        "handler": [],
                        "loggingConfig": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerEsbdLogGroup"
                        ],
                        "memorySize": [],
                        "name": [],
                        "role": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerEsbdRole"
                        ],
                        "runtime": [],
                        "timeout": []
                    },
                    "created": "2024-03-31T03:54:48.476451515Z",
                    "modified": "2024-03-31T07:00:14.999954382Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1390,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVcsmFunction",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerVcsmFunction",
                    "type": "aws:lambda/function:Function",
                    "inputs": {
                        "__defaults": [
                            "packageType",
                            "publish",
                            "reservedConcurrentExecutions",
                            "skipDestroy"
                        ],
                        "architectures": [
                            "x86_64"
                        ],
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "description": "SnapShareApi route GET /posts/{id} (live)",
                        "environment": {
                            "__defaults": [],
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerVcsm",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "handler": "bootstrap",
                        "loggingConfig": {
                            "__defaults": [
                                "applicationLogLevel",
                                "systemLogLevel"
                            ],
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVcsmFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerVcsmRole-uswest2",
                        "runtime": "provided.al2023",
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":600000000000,\"update\":600000000000}}",
                        "architectures": [
                            "x86_64"
                        ],
                        "arn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "codeSigningConfigArn": "",
                        "deadLetterConfig": null,
                        "description": "SnapShareApi route GET /posts/{id} (live)",
                        "environment": {
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerVcsm",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "ephemeralStorage": {
                            "size": 512
                        },
                        "fileSystemConfig": null,
                        "handler": "bootstrap",
                        "id": "snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "imageConfig": null,
                        "imageUri": "",
                        "invokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVcsmFunction/invocations",
                        "kmsKeyArn": "",
                        "lastModified": "2024-03-31T07:00:09.000+0000",
                        "layers": [],
                        "loggingConfig": {
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerVcsmFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "qualifiedArn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVcsmFunction:$LATEST",
                        "qualifiedInvokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVcsmFunction:$LATEST/invocations",
                        "replacementSecurityGroupIds": [],
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerVcsmRole-uswest2",
                        "runtime": "provided.al2023",
                        "signingJobArn": "",
                        "signingProfileVersionArn": "",
                        "skipDestroy": false,
                        "snapStart": null,
                        "sourceCodeHash": "SwU3FC42clOQShUMaX6uh8ABJ4UCZO1BIVdmPSnqw4w=",
                        "sourceCodeSize": 6428900,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20,
                        "tracingConfig": {
                            "mode": "PassThrough"
                        },
                        "version": "$LATEST",
                        "vpcConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVcsm",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerVcsmLogGroup",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerVcsmRole"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "architectures": [],
                        "code": [],
                        "description": [],
                        "environment": [],
                        "handler": [],
                        "loggingConfig": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerVcsmLogGroup"
                        ],
                        "memorySize": [],
                        "name": [],
                        "role": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerVcsmRole"
                        ],
                        "runtime": [],
                        "timeout": []
                    },
                    "created": "2024-03-31T03:41:24.655815662Z",
                    "modified": "2024-03-31T07:00:14.932929248Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1390,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMbktFunction",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerMbktFunction",
                    "type": "aws:lambda/function:Function",
                    "inputs": {
                        "__defaults": [
                            "packageType",
                            "publish",
                            "reservedConcurrentExecutions",
                            "skipDestroy"
                        ],
                        "architectures": [
                            "x86_64"
                        ],
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "description": "SnapShareApi route GET /posts (live)",
                        "environment": {
                            "__defaults": [],
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerMbkt",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "handler": "bootstrap",
                        "loggingConfig": {
                            "__defaults": [
                                "applicationLogLevel",
                                "systemLogLevel"
                            ],
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMbktFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerMbktRole-uswest2",
                        "runtime": "provided.al2023",
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":600000000000,\"update\":600000000000}}",
                        "architectures": [
                            "x86_64"
                        ],
                        "arn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "codeSigningConfigArn": "",
                        "deadLetterConfig": null,
                        "description": "SnapShareApi route GET /posts (live)",
                        "environment": {
                            "variables": {
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerMbkt",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "ephemeralStorage": {
                            "size": 512
                        },
                        "fileSystemConfig": null,
                        "handler": "bootstrap",
                        "id": "snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "imageConfig": null,
                        "imageUri": "",
                        "invokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMbktFunction/invocations",
                        "kmsKeyArn": "",
                        "lastModified": "2024-03-31T07:00:09.000+0000",
                        "layers": [],
                        "loggingConfig": {
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerMbktFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "qualifiedArn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMbktFunction:$LATEST",
                        "qualifiedInvokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMbktFunction:$LATEST/invocations",
                        "replacementSecurityGroupIds": [],
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerMbktRole-uswest2",
                        "runtime": "provided.al2023",
                        "signingJobArn": "",
                        "signingProfileVersionArn": "",
                        "skipDestroy": false,
                        "snapStart": null,
                        "sourceCodeHash": "SwU3FC42clOQShUMaX6uh8ABJ4UCZO1BIVdmPSnqw4w=",
                        "sourceCodeSize": 6428900,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20,
                        "tracingConfig": {
                            "mode": "PassThrough"
                        },
                        "version": "$LATEST",
                        "vpcConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMbkt",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerMbktLogGroup",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerMbktRole"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "architectures": [],
                        "code": [],
                        "description": [],
                        "environment": [],
                        "handler": [],
                        "loggingConfig": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerMbktLogGroup"
                        ],
                        "memorySize": [],
                        "name": [],
                        "role": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerMbktRole"
                        ],
                        "runtime": [],
                        "timeout": []
                    },
                    "created": "2024-03-31T03:41:18.995974221Z",
                    "modified": "2024-03-31T07:00:14.956926054Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1390,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerNohf",
                    "custom": false,
                    "type": "sst:aws:Function",
                    "outputs": {
                        "_metadata": {
                            "handler": "aws/functions/src/s3.handler"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "created": "2024-03-31T03:41:40.586734897Z",
                    "modified": "2024-03-31T03:41:40.586734897Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#891,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2::SnapshareAssetsCors",
                    "custom": true,
                    "id": "snapshare-michael-snapshareassets-wdocbksc",
                    "type": "aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2",
                    "inputs": {
                        "__defaults": [],
                        "bucket": "snapshare-michael-snapshareassets-wdocbksc",
                        "corsRules": [
                            {
                                "__defaults": [],
                                "allowedHeaders": [
                                    "*"
                                ],
                                "allowedMethods": [
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "POST",
                                    "PUT"
                                ],
                                "allowedOrigins": [
                                    "*"
                                ],
                                "maxAgeSeconds": 0
                            }
                        ]
                    },
                    "outputs": {
                        "bucket": "snapshare-michael-snapshareassets-wdocbksc",
                        "corsRules": [
                            {
                                "allowedHeaders": [
                                    "*"
                                ],
                                "allowedMethods": [
                                    "POST",
                                    "GET",
                                    "HEAD",
                                    "DELETE",
                                    "PUT"
                                ],
                                "allowedOrigins": [
                                    "*"
                                ],
                                "exposeHeaders": [],
                                "id": "",
                                "maxAgeSeconds": 0
                            }
                        ],
                        "expectedBucketOwner": "",
                        "id": "snapshare-michael-snapshareassets-wdocbksc"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:Bucket::SnapshareAssets",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                        ],
                        "corsRules": []
                    },
                    "created": "2024-03-31T03:03:55.770946809Z",
                    "modified": "2024-03-31T03:03:55.770946809Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/s3/bucketCorsConfigurationV2.ts#134,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::SnapshareAssetsPublicAccessBlock",
                    "custom": true,
                    "id": "snapshare-michael-snapshareassets-wdocbksc",
                    "type": "aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock",
                    "inputs": {
                        "__defaults": [],
                        "blockPublicAcls": true,
                        "blockPublicPolicy": true,
                        "bucket": "snapshare-michael-snapshareassets-wdocbksc",
                        "ignorePublicAcls": true,
                        "restrictPublicBuckets": true
                    },
                    "outputs": {
                        "blockPublicAcls": true,
                        "blockPublicPolicy": true,
                        "bucket": "snapshare-michael-snapshareassets-wdocbksc",
                        "id": "snapshare-michael-snapshareassets-wdocbksc",
                        "ignorePublicAcls": true,
                        "restrictPublicBuckets": true
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:Bucket::SnapshareAssets",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "blockPublicAcls": [],
                        "blockPublicPolicy": [],
                        "bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                        ],
                        "ignorePublicAcls": [],
                        "restrictPublicBuckets": []
                    },
                    "created": "2024-03-31T03:03:55.522529358Z",
                    "modified": "2024-03-31T03:03:55.522529358Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/s3/bucketPublicAccessBlock.ts#122,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2::SnapshareWebAssetsCors",
                    "custom": true,
                    "id": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                    "type": "aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2",
                    "inputs": {
                        "__defaults": [],
                        "bucket": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "corsRules": [
                            {
                                "__defaults": [],
                                "allowedHeaders": [
                                    "*"
                                ],
                                "allowedMethods": [
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "POST",
                                    "PUT"
                                ],
                                "allowedOrigins": [
                                    "*"
                                ],
                                "maxAgeSeconds": 0
                            }
                        ]
                    },
                    "outputs": {
                        "bucket": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "corsRules": [
                            {
                                "allowedHeaders": [
                                    "*"
                                ],
                                "allowedMethods": [
                                    "POST",
                                    "GET",
                                    "HEAD",
                                    "DELETE",
                                    "PUT"
                                ],
                                "allowedOrigins": [
                                    "*"
                                ],
                                "exposeHeaders": [],
                                "id": "",
                                "maxAgeSeconds": 0
                            }
                        ],
                        "expectedBucketOwner": "",
                        "id": "snapshare-michael-snapsharewebassets-hbnbdxnx"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket::SnapshareWebAssets",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket"
                        ],
                        "corsRules": []
                    },
                    "created": "2024-03-31T00:42:44.394301902Z",
                    "modified": "2024-03-31T00:42:44.394301902Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/s3/bucketCorsConfigurationV2.ts#134,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::SnapshareWebAssetsPublicAccessBlock",
                    "custom": true,
                    "id": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                    "type": "aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock",
                    "inputs": {
                        "__defaults": [],
                        "blockPublicAcls": true,
                        "blockPublicPolicy": true,
                        "bucket": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "ignorePublicAcls": true,
                        "restrictPublicBuckets": true
                    },
                    "outputs": {
                        "blockPublicAcls": true,
                        "blockPublicPolicy": true,
                        "bucket": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "id": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "ignorePublicAcls": true,
                        "restrictPublicBuckets": true
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket::SnapshareWebAssets",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "blockPublicAcls": [],
                        "blockPublicPolicy": [],
                        "bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket"
                        ],
                        "ignorePublicAcls": [],
                        "restrictPublicBuckets": []
                    },
                    "created": "2024-03-31T00:42:45.445129629Z",
                    "modified": "2024-03-31T00:42:45.445129629Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/s3/bucketPublicAccessBlock.ts#122,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default",
                    "custom": true,
                    "id": "d34d9000-780b-49cf-aea4-39a881a7437a",
                    "type": "pulumi:providers:pulumi-nodejs",
                    "created": "2024-03-31T00:42:44.176851509Z",
                    "modified": "2024-03-31T00:42:44.176851509Z"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerNohfLogGroup",
                    "custom": true,
                    "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerNohfFunction",
                    "type": "aws:cloudwatch/logGroup:LogGroup",
                    "inputs": {
                        "__defaults": [
                            "skipDestroy"
                        ],
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:logs:us-west-2:257033689941:log-group:/aws/lambda/snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "id": "/aws/lambda/snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "kmsKeyId": "",
                        "logGroupClass": "STANDARD",
                        "name": "/aws/lambda/snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "namePrefix": "",
                        "retentionInDays": 0,
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerNohf",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "name": [],
                        "retentionInDays": []
                    },
                    "created": "2024-03-31T03:41:41.150277464Z",
                    "modified": "2024-03-31T03:41:41.150277464Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1377,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$pulumi-nodejs:dynamic:Resource::SnapshareWebAssetFiles.sst.aws.BucketFiles",
                    "custom": true,
                    "id": "files",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"upload\", { configurable: true, writable: true, value: __f4 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        await this.upload(inputs.bucketName, inputs.files, []);\n        return { id: \"files\" };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        await this.upload(\n          news.bucketName,\n          news.files,\n          news.bucketName === olds.bucketName ? olds.files : []\n        );\n        return {};\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-s3/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-s3/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_sdk_s3_1 = require(\"@aws-sdk/middleware-sdk-s3/dist-cjs/index.js\");\nconst CreateSessionCommand_1 = require(\"@aws-sdk/client-s3/dist-cjs/commands/CreateSessionCommand.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-s3/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\nconst middleware_expect_continue_1 = require(\"@aws-sdk/middleware-expect-continue/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_sdk_s3_1.resolveS3Config)(_config_6, { session: [() => this, CreateSessionCommand_1.CreateSessionCommand] });\n    const _config_8 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_7);\n    const _config_9 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_8);\n    const _config_10 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_9, configuration?.extensions || []);\n    __super.call(this, _config_10);\n    this.config = _config_10;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_sdk_s3_1.getValidateBucketNamePlugin)(this.config));\n    this.middlewareStack.use((0, middleware_expect_continue_1.getAddExpectContinuePlugin)(this.config));\n    this.middlewareStack.use((0, middleware_sdk_s3_1.getRegionRedirectMiddlewarePlugin)(this.config));\n    this.middlewareStack.use((0, middleware_sdk_s3_1.getS3ExpressPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec/dist-cjs/index.js\");\nconst middleware_flexible_checksums_1 = require(\"@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js\");\nconst models_1_1 = require(\"@aws-sdk/client-s3/dist-cjs/models/models_1.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ PutObjectCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutObjectCommand.getEndpointParameterInstructions()));\n    this.middlewareStack.use((0, middleware_sdk_s3_1.getCheckContentLengthHeaderPlugin)(configuration));\n    this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));\n    this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {\n        input: this.input,\n        requestAlgorithmMember: \"ChecksumAlgorithm\",\n        requestChecksumRequired: false,\n    }));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"PutObjectCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_1_1.PutObjectRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_1_1.PutObjectOutputFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AmazonS3\",\n            operation: \"PutObject\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restXml_1 = require(\"@aws-sdk/client-s3/dist-cjs/protocols/Aws_restXml.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restXml_1.se_PutObjectCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restXml_1.de_PutObjectCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        Bucket: { type: \"contextParams\", name: \"Bucket\" },\n        Key: { type: \"contextParams\", name: \"Key\" },\n        ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n        UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n        DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n        Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n        DisableS3ExpressSessionAuth: { type: \"clientContextParams\", name: \"disableS3ExpressSessionAuth\" },\n        UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst fs4 = require(\"fs\");\n\nfunction __f4(__0, __1, __2) {\n  return (function() {\n    with({ useClient: __f5, S3Client2: __f13, PutObjectCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*upload*/(bucketName, files, oldFiles) {\n        const oldFilesMap = new Map(oldFiles.map((f) => [f.key, f]));\n        const s34 = useClient(S3Client2);\n        await Promise.all(\n          files.map(async (file) => {\n            const oldFile = oldFilesMap.get(file.key);\n            if (oldFile && oldFile.hash === file.hash && oldFile.cacheControl === file.cacheControl && oldFile.contentType === file.contentType) {\n              return;\n            }\n            await s34.send(\n              new PutObjectCommand({\n                Bucket: bucketName,\n                Key: file.key,\n                Body: await fs4.promises.readFile(file.source),\n                CacheControl: file.cacheControl,\n                ContentType: file.contentType\n              })\n            );\n          })\n        );\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "bucketName": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "files": [
                            {
                                "cacheControl": "max-age=0,no-cache,no-store,must-revalidate",
                                "contentType": "text/html;charset=UTF-8",
                                "hash": "b0693dc92f76e08bf1485b3dd9b514a2e31dfd6f39422a6b60edb722671dc98f",
                                "key": "index.html",
                                "source": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-site/index.html"
                            }
                        ]
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"upload\", { configurable: true, writable: true, value: __f4 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        await this.upload(inputs.bucketName, inputs.files, []);\n        return { id: \"files\" };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        await this.upload(\n          news.bucketName,\n          news.files,\n          news.bucketName === olds.bucketName ? olds.files : []\n        );\n        return {};\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-s3/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-s3/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_sdk_s3_1 = require(\"@aws-sdk/middleware-sdk-s3/dist-cjs/index.js\");\nconst CreateSessionCommand_1 = require(\"@aws-sdk/client-s3/dist-cjs/commands/CreateSessionCommand.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-s3/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\nconst middleware_expect_continue_1 = require(\"@aws-sdk/middleware-expect-continue/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_sdk_s3_1.resolveS3Config)(_config_6, { session: [() => this, CreateSessionCommand_1.CreateSessionCommand] });\n    const _config_8 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_7);\n    const _config_9 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_8);\n    const _config_10 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_9, configuration?.extensions || []);\n    __super.call(this, _config_10);\n    this.config = _config_10;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_sdk_s3_1.getValidateBucketNamePlugin)(this.config));\n    this.middlewareStack.use((0, middleware_expect_continue_1.getAddExpectContinuePlugin)(this.config));\n    this.middlewareStack.use((0, middleware_sdk_s3_1.getRegionRedirectMiddlewarePlugin)(this.config));\n    this.middlewareStack.use((0, middleware_sdk_s3_1.getS3ExpressPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec/dist-cjs/index.js\");\nconst middleware_flexible_checksums_1 = require(\"@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js\");\nconst models_1_1 = require(\"@aws-sdk/client-s3/dist-cjs/models/models_1.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ PutObjectCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutObjectCommand.getEndpointParameterInstructions()));\n    this.middlewareStack.use((0, middleware_sdk_s3_1.getCheckContentLengthHeaderPlugin)(configuration));\n    this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));\n    this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {\n        input: this.input,\n        requestAlgorithmMember: \"ChecksumAlgorithm\",\n        requestChecksumRequired: false,\n    }));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"PutObjectCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_1_1.PutObjectRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_1_1.PutObjectOutputFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AmazonS3\",\n            operation: \"PutObject\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restXml_1 = require(\"@aws-sdk/client-s3/dist-cjs/protocols/Aws_restXml.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restXml_1.se_PutObjectCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restXml_1.de_PutObjectCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        Bucket: { type: \"contextParams\", name: \"Bucket\" },\n        Key: { type: \"contextParams\", name: \"Key\" },\n        ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n        UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n        DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n        Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n        DisableS3ExpressSessionAuth: { type: \"clientContextParams\", name: \"disableS3ExpressSessionAuth\" },\n        UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst fs4 = require(\"fs\");\n\nfunction __f4(__0, __1, __2) {\n  return (function() {\n    with({ useClient: __f5, S3Client2: __f13, PutObjectCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*upload*/(bucketName, files, oldFiles) {\n        const oldFilesMap = new Map(oldFiles.map((f) => [f.key, f]));\n        const s34 = useClient(S3Client2);\n        await Promise.all(\n          files.map(async (file) => {\n            const oldFile = oldFilesMap.get(file.key);\n            if (oldFile && oldFile.hash === file.hash && oldFile.cacheControl === file.cacheControl && oldFile.contentType === file.contentType) {\n              return;\n            }\n            await s34.send(\n              new PutObjectCommand({\n                Bucket: bucketName,\n                Key: file.key,\n                Body: await fs4.promises.readFile(file.source),\n                CacheControl: file.cacheControl,\n                ContentType: file.contentType\n              })\n            );\n          })\n        );\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite::SnapshareWeb",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default::d34d9000-780b-49cf-aea4-39a881a7437a",
                    "propertyDependencies": {
                        "__provider": [],
                        "bucketName": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket"
                        ],
                        "files": []
                    },
                    "created": "2024-03-31T00:42:44.526354955Z",
                    "modified": "2024-03-31T00:42:44.526354955Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/providers/bucket-files.ts#83,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerNohfRole",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerNohfRole-uswest2",
                    "type": "aws:iam/role:Role",
                    "inputs": {
                        "__defaults": [
                            "forceDetachPolicies",
                            "maxSessionDuration",
                            "path"
                        ],
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "forceDetachPolicies": false,
                        "inlinePolicies": [
                            {
                                "__defaults": [],
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::snapshare-michael-snapshareassets-wdocbksc/*\",\n        \"arn:aws:s3:::snapshare-michael-snapshareassets-wdocbksc\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerNohfRole-uswest2",
                        "path": "/",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerNohfRole-uswest2",
                        "assumeRolePolicy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Sid\":\"AllowAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                        "createDate": "2024-03-31T03:41:41Z",
                        "description": "",
                        "forceDetachPolicies": false,
                        "id": "snapshare-michael-SnapShareApiHandlerNohfRole-uswest2",
                        "inlinePolicies": [
                            {
                                "name": "inline",
                                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::snapshare-michael-snapshareassets-wdocbksc/*\",\n        \"arn:aws:s3:::snapshare-michael-snapshareassets-wdocbksc\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iot:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
                            }
                        ],
                        "managedPolicyArns": [
                            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                        ],
                        "maxSessionDuration": 3600,
                        "name": "snapshare-michael-SnapShareApiHandlerNohfRole-uswest2",
                        "namePrefix": "",
                        "path": "/",
                        "permissionsBoundary": "",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "uniqueId": "AROATXWDG3NK3WSIOV555"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerNohf",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "assumeRolePolicy": [],
                        "inlinePolicies": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                        ],
                        "managedPolicyArns": [],
                        "name": []
                    },
                    "created": "2024-03-31T03:41:42.394992233Z",
                    "modified": "2024-03-31T07:52:46.598270105Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1241,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::SnapshareAssetsPolicy",
                    "custom": true,
                    "id": "snapshare-michael-snapshareassets-wdocbksc",
                    "type": "aws:s3/bucketPolicy:BucketPolicy",
                    "inputs": {
                        "__defaults": [],
                        "bucket": "snapshare-michael-snapshareassets-wdocbksc",
                        "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Deny\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::snapshare-michael-snapshareassets-wdocbksc/*\",\n        \"arn:aws:s3:::snapshare-michael-snapshareassets-wdocbksc\"\n      ],\n      \"Principal\": \"*\",\n      \"Condition\": {\n        \"Bool\": {\n          \"aws:SecureTransport\": \"false\"\n        }\n      }\n    }\n  ]\n}"
                    },
                    "outputs": {
                        "bucket": "snapshare-michael-snapshareassets-wdocbksc",
                        "id": "snapshare-michael-snapshareassets-wdocbksc",
                        "policy": "{\"Statement\":[{\"Action\":\"s3:*\",\"Condition\":{\"Bool\":{\"aws:SecureTransport\":\"false\"}},\"Effect\":\"Deny\",\"Principal\":\"*\",\"Resource\":[\"arn:aws:s3:::snapshare-michael-snapshareassets-wdocbksc/*\",\"arn:aws:s3:::snapshare-michael-snapshareassets-wdocbksc\"]}],\"Version\":\"2012-10-17\"}"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:Bucket::SnapshareAssets",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::SnapshareAssetsPublicAccessBlock",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                        ],
                        "policy": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                        ]
                    },
                    "created": "2024-03-31T03:03:55.899462717Z",
                    "modified": "2024-03-31T03:03:55.899462717Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/s3/bucketPolicy.ts#119,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::SnapshareWebAssetsPolicy",
                    "custom": true,
                    "id": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                    "type": "aws:s3/bucketPolicy:BucketPolicy",
                    "inputs": {
                        "__defaults": [],
                        "bucket": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Deny\",\"Action\":\"s3:*\",\"Resource\":[\"arn:aws:s3:::snapshare-michael-snapsharewebassets-hbnbdxnx/*\",\"arn:aws:s3:::snapshare-michael-snapsharewebassets-hbnbdxnx\"],\"Principal\":\"*\",\"Condition\":{\"Bool\":{\"aws:SecureTransport\":\"false\"}}},{\"Effect\":\"Allow\",\"Action\":\"s3:GetObject\",\"Resource\":\"arn:aws:s3:::snapshare-michael-snapsharewebassets-hbnbdxnx/*\",\"Principal\":{\"AWS\":\"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E4IQVGDM98XKI\"}}]}"
                    },
                    "outputs": {
                        "bucket": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "id": "snapshare-michael-snapsharewebassets-hbnbdxnx",
                        "policy": "{\"Statement\":[{\"Action\":\"s3:*\",\"Condition\":{\"Bool\":{\"aws:SecureTransport\":\"false\"}},\"Effect\":\"Deny\",\"Principal\":\"*\",\"Resource\":[\"arn:aws:s3:::snapshare-michael-snapsharewebassets-hbnbdxnx/*\",\"arn:aws:s3:::snapshare-michael-snapsharewebassets-hbnbdxnx\"]},{\"Action\":\"s3:GetObject\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E4IQVGDM98XKI\"},\"Resource\":\"arn:aws:s3:::snapshare-michael-snapsharewebassets-hbnbdxnx/*\"}],\"Version\":\"2012-10-17\"}"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket::SnapshareWebAssets",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$aws:cloudfront/originAccessIdentity:OriginAccessIdentity::SnapshareWebOriginAccessIdentity",
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::SnapshareWebAssetsPublicAccessBlock",
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket"
                        ],
                        "policy": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket",
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$aws:cloudfront/originAccessIdentity:OriginAccessIdentity::SnapshareWebOriginAccessIdentity"
                        ]
                    },
                    "created": "2024-03-31T00:42:49.751264713Z",
                    "modified": "2024-03-31T00:42:49.751264713Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/s3/bucketPolicy.ts#119,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerVhbbCode",
                    "custom": true,
                    "id": "assets/SnapShareApiHandlerVhbb-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                    "type": "aws:s3/bucketObjectv2:BucketObjectv2",
                    "inputs": {
                        "__defaults": [
                            "forceDestroy"
                        ],
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "forceDestroy": false,
                        "key": "assets/SnapShareApiHandlerVhbb-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerVhbb/code.zip"
                        },
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:s3:::sst-asset-bmkfhcwonufc/assets/SnapShareApiHandlerVhbb-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "bucketKeyEnabled": false,
                        "cacheControl": "",
                        "checksumCrc32": "",
                        "checksumCrc32c": "",
                        "checksumSha1": "",
                        "checksumSha256": "",
                        "contentDisposition": "",
                        "contentEncoding": "",
                        "contentLanguage": "",
                        "contentType": "binary/octet-stream",
                        "etag": "f0313befd58b0f2b3dc0b4b22a3d3d4e-2",
                        "forceDestroy": false,
                        "id": "assets/SnapShareApiHandlerVhbb-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "key": "assets/SnapShareApiHandlerVhbb-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "metadata": {},
                        "objectLockLegalHoldStatus": "",
                        "objectLockMode": "",
                        "objectLockRetainUntilDate": "",
                        "serverSideEncryption": "AES256",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerVhbb/code.zip"
                        },
                        "storageClass": "STANDARD",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "versionId": "",
                        "websiteRedirect": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVhbb",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [],
                        "key": [],
                        "source": []
                    },
                    "retainOnDelete": true,
                    "created": "2024-03-31T06:47:33.059149935Z",
                    "modified": "2024-03-31T06:47:33.059149935Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1357,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerMahfCode",
                    "custom": true,
                    "id": "assets/SnapShareApiHandlerMahf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                    "type": "aws:s3/bucketObjectv2:BucketObjectv2",
                    "inputs": {
                        "__defaults": [
                            "forceDestroy"
                        ],
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "forceDestroy": false,
                        "key": "assets/SnapShareApiHandlerMahf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerMahf/code.zip"
                        },
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:s3:::sst-asset-bmkfhcwonufc/assets/SnapShareApiHandlerMahf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "bucketKeyEnabled": false,
                        "cacheControl": "",
                        "checksumCrc32": "",
                        "checksumCrc32c": "",
                        "checksumSha1": "",
                        "checksumSha256": "",
                        "contentDisposition": "",
                        "contentEncoding": "",
                        "contentLanguage": "",
                        "contentType": "binary/octet-stream",
                        "etag": "f0313befd58b0f2b3dc0b4b22a3d3d4e-2",
                        "forceDestroy": false,
                        "id": "assets/SnapShareApiHandlerMahf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "key": "assets/SnapShareApiHandlerMahf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "metadata": {},
                        "objectLockLegalHoldStatus": "",
                        "objectLockMode": "",
                        "objectLockRetainUntilDate": "",
                        "serverSideEncryption": "AES256",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerMahf/code.zip"
                        },
                        "storageClass": "STANDARD",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "versionId": "",
                        "websiteRedirect": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMahf",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [],
                        "key": [],
                        "source": []
                    },
                    "retainOnDelete": true,
                    "created": "2024-03-31T06:47:34.360474135Z",
                    "modified": "2024-03-31T06:47:34.360474135Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1357,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerMbktCode",
                    "custom": true,
                    "id": "assets/SnapShareApiHandlerMbkt-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                    "type": "aws:s3/bucketObjectv2:BucketObjectv2",
                    "inputs": {
                        "__defaults": [
                            "forceDestroy"
                        ],
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "forceDestroy": false,
                        "key": "assets/SnapShareApiHandlerMbkt-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerMbkt/code.zip"
                        },
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:s3:::sst-asset-bmkfhcwonufc/assets/SnapShareApiHandlerMbkt-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "bucketKeyEnabled": false,
                        "cacheControl": "",
                        "checksumCrc32": "",
                        "checksumCrc32c": "",
                        "checksumSha1": "",
                        "checksumSha256": "",
                        "contentDisposition": "",
                        "contentEncoding": "",
                        "contentLanguage": "",
                        "contentType": "binary/octet-stream",
                        "etag": "f0313befd58b0f2b3dc0b4b22a3d3d4e-2",
                        "forceDestroy": false,
                        "id": "assets/SnapShareApiHandlerMbkt-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "key": "assets/SnapShareApiHandlerMbkt-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "metadata": {},
                        "objectLockLegalHoldStatus": "",
                        "objectLockMode": "",
                        "objectLockRetainUntilDate": "",
                        "serverSideEncryption": "AES256",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerMbkt/code.zip"
                        },
                        "storageClass": "STANDARD",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "versionId": "",
                        "websiteRedirect": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMbkt",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [],
                        "key": [],
                        "source": []
                    },
                    "retainOnDelete": true,
                    "created": "2024-03-31T06:47:33.607767671Z",
                    "modified": "2024-03-31T06:47:33.607767671Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1357,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerEsbdCode",
                    "custom": true,
                    "id": "assets/SnapShareApiHandlerEsbd-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                    "type": "aws:s3/bucketObjectv2:BucketObjectv2",
                    "inputs": {
                        "__defaults": [
                            "forceDestroy"
                        ],
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "forceDestroy": false,
                        "key": "assets/SnapShareApiHandlerEsbd-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerEsbd/code.zip"
                        },
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:s3:::sst-asset-bmkfhcwonufc/assets/SnapShareApiHandlerEsbd-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "bucketKeyEnabled": false,
                        "cacheControl": "",
                        "checksumCrc32": "",
                        "checksumCrc32c": "",
                        "checksumSha1": "",
                        "checksumSha256": "",
                        "contentDisposition": "",
                        "contentEncoding": "",
                        "contentLanguage": "",
                        "contentType": "binary/octet-stream",
                        "etag": "f0313befd58b0f2b3dc0b4b22a3d3d4e-2",
                        "forceDestroy": false,
                        "id": "assets/SnapShareApiHandlerEsbd-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "key": "assets/SnapShareApiHandlerEsbd-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "metadata": {},
                        "objectLockLegalHoldStatus": "",
                        "objectLockMode": "",
                        "objectLockRetainUntilDate": "",
                        "serverSideEncryption": "AES256",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerEsbd/code.zip"
                        },
                        "storageClass": "STANDARD",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "versionId": "",
                        "websiteRedirect": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerEsbd",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [],
                        "key": [],
                        "source": []
                    },
                    "retainOnDelete": true,
                    "created": "2024-03-31T06:47:33.855432982Z",
                    "modified": "2024-03-31T06:47:33.855432982Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1357,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN::SnapshareWebCdn",
                    "custom": false,
                    "type": "sst:aws:CDN",
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite::SnapshareWeb",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$pulumi-nodejs:dynamic:Resource::SnapshareWebAssetFiles.sst.aws.BucketFiles"
                    ],
                    "created": "2024-03-31T00:42:44.540555611Z",
                    "modified": "2024-03-31T00:42:44.540555611Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/cdn.ts#168,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerVcsmCode",
                    "custom": true,
                    "id": "assets/SnapShareApiHandlerVcsm-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                    "type": "aws:s3/bucketObjectv2:BucketObjectv2",
                    "inputs": {
                        "__defaults": [
                            "forceDestroy"
                        ],
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "forceDestroy": false,
                        "key": "assets/SnapShareApiHandlerVcsm-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerVcsm/code.zip"
                        },
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:s3:::sst-asset-bmkfhcwonufc/assets/SnapShareApiHandlerVcsm-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "bucketKeyEnabled": false,
                        "cacheControl": "",
                        "checksumCrc32": "",
                        "checksumCrc32c": "",
                        "checksumSha1": "",
                        "checksumSha256": "",
                        "contentDisposition": "",
                        "contentEncoding": "",
                        "contentLanguage": "",
                        "contentType": "binary/octet-stream",
                        "etag": "f0313befd58b0f2b3dc0b4b22a3d3d4e-2",
                        "forceDestroy": false,
                        "id": "assets/SnapShareApiHandlerVcsm-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "key": "assets/SnapShareApiHandlerVcsm-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "metadata": {},
                        "objectLockLegalHoldStatus": "",
                        "objectLockMode": "",
                        "objectLockRetainUntilDate": "",
                        "serverSideEncryption": "AES256",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerVcsm/code.zip"
                        },
                        "storageClass": "STANDARD",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "versionId": "",
                        "websiteRedirect": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVcsm",
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [],
                        "key": [],
                        "source": []
                    },
                    "retainOnDelete": true,
                    "created": "2024-03-31T06:47:33.90773157Z",
                    "modified": "2024-03-31T06:47:33.90773157Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1357,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerNohfFunction",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerNohfFunction",
                    "type": "aws:lambda/function:Function",
                    "inputs": {
                        "__defaults": [
                            "packageType",
                            "publish",
                            "reservedConcurrentExecutions",
                            "skipDestroy"
                        ],
                        "architectures": [
                            "x86_64"
                        ],
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "description": "SnapShareApi route POST /signed-url (live)",
                        "environment": {
                            "__defaults": [],
                            "variables": {
                                "BUCKET_NAME": "snapshare-michael-snapshareassets-wdocbksc",
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerNohf",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "handler": "bootstrap",
                        "loggingConfig": {
                            "__defaults": [
                                "applicationLogLevel",
                                "systemLogLevel"
                            ],
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerNohfFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerNohfRole-uswest2",
                        "runtime": "provided.al2023",
                        "skipDestroy": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20
                    },
                    "outputs": {
                        "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":600000000000,\"update\":600000000000}}",
                        "architectures": [
                            "x86_64"
                        ],
                        "arn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "code": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "d9cf1a99d862f2257659e0930d41040d34d81e7eab22ed84177778f6453b63a1",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/platform/functions/empty-function"
                        },
                        "codeSigningConfigArn": "",
                        "deadLetterConfig": null,
                        "description": "SnapShareApi route POST /signed-url (live)",
                        "environment": {
                            "variables": {
                                "BUCKET_NAME": "snapshare-michael-snapshareassets-wdocbksc",
                                "SST_APP": "snapshare",
                                "SST_FUNCTION_ID": "SnapShareApiHandlerNohf",
                                "SST_STAGE": "michael",
                                "TURSO_CONNECTION_URL": "http://127.0.0.1:8080"
                            }
                        },
                        "ephemeralStorage": {
                            "size": 512
                        },
                        "fileSystemConfig": null,
                        "handler": "bootstrap",
                        "id": "snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "imageConfig": null,
                        "imageUri": "",
                        "invokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerNohfFunction/invocations",
                        "kmsKeyArn": "",
                        "lastModified": "2024-03-31T07:00:10.000+0000",
                        "layers": [],
                        "loggingConfig": {
                            "applicationLogLevel": "",
                            "logFormat": "Text",
                            "logGroup": "/aws/lambda/snapshare-michael-SnapShareApiHandlerNohfFunction",
                            "systemLogLevel": ""
                        },
                        "memorySize": 1024,
                        "name": "snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "packageType": "Zip",
                        "publish": false,
                        "qualifiedArn": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerNohfFunction:$LATEST",
                        "qualifiedInvokeArn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerNohfFunction:$LATEST/invocations",
                        "replacementSecurityGroupIds": [],
                        "reservedConcurrentExecutions": -1,
                        "role": "arn:aws:iam::257033689941:role/snapshare-michael-SnapShareApiHandlerNohfRole-uswest2",
                        "runtime": "provided.al2023",
                        "signingJobArn": "",
                        "signingProfileVersionArn": "",
                        "skipDestroy": false,
                        "snapStart": null,
                        "sourceCodeHash": "SwU3FC42clOQShUMaX6uh8ABJ4UCZO1BIVdmPSnqw4w=",
                        "sourceCodeSize": 6428900,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "timeout": 20,
                        "tracingConfig": {
                            "mode": "PassThrough"
                        },
                        "version": "$LATEST",
                        "vpcConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerNohf",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerNohfLogGroup",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerNohfRole",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2::SnapshareAssetsCors",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::SnapshareAssetsPolicy",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::SnapshareAssetsPublicAccessBlock",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$random:index/randomId:RandomId::SnapshareAssetsId"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "architectures": [],
                        "code": [],
                        "description": [],
                        "environment": [],
                        "handler": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$random:index/randomId:RandomId::SnapshareAssetsId",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2::SnapshareAssetsCors",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::SnapshareAssetsPublicAccessBlock",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::SnapshareAssetsPolicy"
                        ],
                        "loggingConfig": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:cloudwatch/logGroup:LogGroup::SnapShareApiHandlerNohfLogGroup"
                        ],
                        "memorySize": [],
                        "name": [],
                        "role": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:iam/role:Role::SnapShareApiHandlerNohfRole"
                        ],
                        "runtime": [],
                        "timeout": []
                    },
                    "created": "2024-03-31T03:42:07.128972779Z",
                    "modified": "2024-03-31T07:00:15.440858636Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1390,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerNohfCode",
                    "custom": true,
                    "id": "assets/SnapShareApiHandlerNohf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                    "type": "aws:s3/bucketObjectv2:BucketObjectv2",
                    "inputs": {
                        "__defaults": [
                            "forceDestroy"
                        ],
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "forceDestroy": false,
                        "key": "assets/SnapShareApiHandlerNohf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerNohf/code.zip"
                        },
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        }
                    },
                    "outputs": {
                        "arn": "arn:aws:s3:::sst-asset-bmkfhcwonufc/assets/SnapShareApiHandlerNohf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "bucket": "sst-asset-bmkfhcwonufc",
                        "bucketKeyEnabled": false,
                        "cacheControl": "",
                        "checksumCrc32": "",
                        "checksumCrc32c": "",
                        "checksumSha1": "",
                        "checksumSha256": "",
                        "contentDisposition": "",
                        "contentEncoding": "",
                        "contentLanguage": "",
                        "contentType": "binary/octet-stream",
                        "etag": "f0313befd58b0f2b3dc0b4b22a3d3d4e-2",
                        "forceDestroy": false,
                        "id": "assets/SnapShareApiHandlerNohf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "key": "assets/SnapShareApiHandlerNohf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip",
                        "metadata": {},
                        "objectLockLegalHoldStatus": "",
                        "objectLockMode": "",
                        "objectLockRetainUntilDate": "",
                        "serverSideEncryption": "AES256",
                        "source": {
                            "4dabf18193072939515e22adb298388d": "0def7320c3a5731c473e5ecbe6d01bc7",
                            "hash": "4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c",
                            "path": "/home/michael/Documents/projects/snapshare/.sst/artifacts/SnapShareApiHandlerNohf/code.zip"
                        },
                        "storageClass": "STANDARD",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "versionId": "",
                        "websiteRedirect": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerNohf",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2::SnapshareAssetsCors",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::SnapshareAssetsPolicy",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::SnapshareAssetsPublicAccessBlock",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$random:index/randomId:RandomId::SnapshareAssetsId"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "bucket": [],
                        "key": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::SnapshareAssetsPublicAccessBlock",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::SnapshareAssetsPolicy",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$random:index/randomId:RandomId::SnapshareAssetsId",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2::SnapshareAssetsCors"
                        ],
                        "source": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2::SnapshareAssetsCors",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock::SnapshareAssetsPublicAccessBlock",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketPolicy:BucketPolicy::SnapshareAssetsPolicy",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$random:index/randomId:RandomId::SnapshareAssetsId"
                        ]
                    },
                    "retainOnDelete": true,
                    "created": "2024-03-31T06:47:33.675924068Z",
                    "modified": "2024-03-31T06:47:33.675924068Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/function.ts#1357,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVhbbCodeUpdater.sst.aws.FunctionCodeUpdater",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerVhbbFunction",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "functionLastModified": "2024-03-31T07:00:09.000+0000",
                        "functionName": "snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "region": "us-west-2",
                        "s3Bucket": "sst-asset-bmkfhcwonufc",
                        "s3Key": "assets/SnapShareApiHandlerVhbb-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip"
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "version": "$LATEST"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVhbb",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVhbbFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerVhbbCode"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default::d34d9000-780b-49cf-aea4-39a881a7437a",
                    "propertyDependencies": {
                        "__provider": [],
                        "functionLastModified": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVhbbFunction"
                        ],
                        "functionName": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVhbbFunction"
                        ],
                        "region": [],
                        "s3Bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerVhbbCode"
                        ],
                        "s3Key": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerVhbbCode"
                        ]
                    },
                    "created": "2024-03-31T03:41:32.406902707Z",
                    "modified": "2024-03-31T07:00:17.38091353Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/providers/function-code-updater.ts#110,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMahfCodeUpdater.sst.aws.FunctionCodeUpdater",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerMahfFunction",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "functionLastModified": "2024-03-31T07:00:09.000+0000",
                        "functionName": "snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "region": "us-west-2",
                        "s3Bucket": "sst-asset-bmkfhcwonufc",
                        "s3Key": "assets/SnapShareApiHandlerMahf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip"
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "version": "$LATEST"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMahf",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMahfFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerMahfCode"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default::d34d9000-780b-49cf-aea4-39a881a7437a",
                    "propertyDependencies": {
                        "__provider": [],
                        "functionLastModified": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMahfFunction"
                        ],
                        "functionName": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMahfFunction"
                        ],
                        "region": [],
                        "s3Bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerMahfCode"
                        ],
                        "s3Key": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerMahfCode"
                        ]
                    },
                    "created": "2024-03-31T03:42:03.655229701Z",
                    "modified": "2024-03-31T07:00:17.429993621Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/providers/function-code-updater.ts#110,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMbktCodeUpdater.sst.aws.FunctionCodeUpdater",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerMbktFunction",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "functionLastModified": "2024-03-31T07:00:09.000+0000",
                        "functionName": "snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "region": "us-west-2",
                        "s3Bucket": "sst-asset-bmkfhcwonufc",
                        "s3Key": "assets/SnapShareApiHandlerMbkt-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip"
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "version": "$LATEST"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerMbkt",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMbktFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerMbktCode"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default::d34d9000-780b-49cf-aea4-39a881a7437a",
                    "propertyDependencies": {
                        "__provider": [],
                        "functionLastModified": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMbktFunction"
                        ],
                        "functionName": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMbktFunction"
                        ],
                        "region": [],
                        "s3Bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerMbktCode"
                        ],
                        "s3Key": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerMbktCode"
                        ]
                    },
                    "created": "2024-03-31T03:41:21.309440636Z",
                    "modified": "2024-03-31T07:00:17.160958939Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/providers/function-code-updater.ts#110,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerEsbdCodeUpdater.sst.aws.FunctionCodeUpdater",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerEsbdFunction",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "functionLastModified": "2024-03-31T07:00:09.000+0000",
                        "functionName": "snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "region": "us-west-2",
                        "s3Bucket": "sst-asset-bmkfhcwonufc",
                        "s3Key": "assets/SnapShareApiHandlerEsbd-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip"
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "version": "$LATEST"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerEsbd",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerEsbdFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerEsbdCode"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default::d34d9000-780b-49cf-aea4-39a881a7437a",
                    "propertyDependencies": {
                        "__provider": [],
                        "functionLastModified": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerEsbdFunction"
                        ],
                        "functionName": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerEsbdFunction"
                        ],
                        "region": [],
                        "s3Bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerEsbdCode"
                        ],
                        "s3Key": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerEsbdCode"
                        ]
                    },
                    "created": "2024-03-31T03:54:50.098996562Z",
                    "modified": "2024-03-31T07:00:17.225925072Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/providers/function-code-updater.ts#110,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::SnapshareWebCdnDistribution",
                    "custom": true,
                    "id": "E1KUQARMXXCHAM",
                    "type": "aws:cloudfront/distribution:Distribution",
                    "inputs": {
                        "__defaults": [
                            "httpVersion",
                            "isIpv6Enabled",
                            "priceClass",
                            "retainOnDelete",
                            "staging"
                        ],
                        "aliases": [],
                        "comment": "SnapshareWeb site",
                        "customErrorResponses": [
                            {
                                "__defaults": [],
                                "errorCode": 403,
                                "responseCode": 200,
                                "responsePagePath": "/index.html"
                            },
                            {
                                "__defaults": [],
                                "errorCode": 404,
                                "responseCode": 200,
                                "responsePagePath": "/index.html"
                            }
                        ],
                        "defaultCacheBehavior": {
                            "__defaults": [
                                "minTtl"
                            ],
                            "allowedMethods": [
                                "GET",
                                "HEAD",
                                "OPTIONS"
                            ],
                            "cachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
                            "cachedMethods": [
                                "GET",
                                "HEAD"
                            ],
                            "compress": true,
                            "minTtl": 0,
                            "targetOriginId": "s3",
                            "viewerProtocolPolicy": "redirect-to-https"
                        },
                        "defaultRootObject": "index.html",
                        "enabled": true,
                        "httpVersion": "http2",
                        "isIpv6Enabled": false,
                        "origins": [
                            {
                                "__defaults": [
                                    "connectionAttempts",
                                    "connectionTimeout"
                                ],
                                "connectionAttempts": 3,
                                "connectionTimeout": 10,
                                "domainName": "snapshare-michael-snapsharewebassets-hbnbdxnx.s3.us-west-2.amazonaws.com",
                                "originId": "s3",
                                "originPath": "",
                                "s3OriginConfig": {
                                    "__defaults": [],
                                    "originAccessIdentity": "origin-access-identity/cloudfront/E4IQVGDM98XKI"
                                }
                            }
                        ],
                        "priceClass": "PriceClass_All",
                        "restrictions": {
                            "__defaults": [],
                            "geoRestriction": {
                                "__defaults": [],
                                "restrictionType": "none"
                            }
                        },
                        "retainOnDelete": false,
                        "staging": false,
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "viewerCertificate": {
                            "__defaults": [
                                "minimumProtocolVersion"
                            ],
                            "cloudfrontDefaultCertificate": true,
                            "minimumProtocolVersion": "TLSv1"
                        },
                        "waitForDeployment": false
                    },
                    "outputs": {
                        "__meta": "{\"schema_version\":\"1\"}",
                        "aliases": [],
                        "arn": "arn:aws:cloudfront::257033689941:distribution/E1KUQARMXXCHAM",
                        "callerReference": "terraform-20240331004244565500000002",
                        "comment": "SnapshareWeb site",
                        "continuousDeploymentPolicyId": "",
                        "customErrorResponses": [
                            {
                                "errorCachingMinTtl": 0,
                                "errorCode": 404,
                                "responseCode": 200,
                                "responsePagePath": "/index.html"
                            },
                            {
                                "errorCachingMinTtl": 0,
                                "errorCode": 403,
                                "responseCode": 200,
                                "responsePagePath": "/index.html"
                            }
                        ],
                        "defaultCacheBehavior": {
                            "allowedMethods": [
                                "GET",
                                "HEAD",
                                "OPTIONS"
                            ],
                            "cachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
                            "cachedMethods": [
                                "GET",
                                "HEAD"
                            ],
                            "compress": true,
                            "defaultTtl": 0,
                            "fieldLevelEncryptionId": "",
                            "forwardedValues": null,
                            "functionAssociations": [],
                            "lambdaFunctionAssociations": [],
                            "maxTtl": 0,
                            "minTtl": 0,
                            "originRequestPolicyId": "",
                            "realtimeLogConfigArn": "",
                            "responseHeadersPolicyId": "",
                            "smoothStreaming": false,
                            "targetOriginId": "s3",
                            "trustedKeyGroups": [],
                            "trustedSigners": [],
                            "viewerProtocolPolicy": "redirect-to-https"
                        },
                        "defaultRootObject": "index.html",
                        "domainName": "d12hp8ej84ufkl.cloudfront.net",
                        "enabled": true,
                        "etag": "E27OAG2WPZRY34",
                        "hostedZoneId": "Z2FDTNDATAQYW2",
                        "httpVersion": "http2",
                        "id": "E1KUQARMXXCHAM",
                        "inProgressValidationBatches": 0,
                        "isIpv6Enabled": false,
                        "lastModifiedTime": "2024-03-31 00:42:44.662 +0000 UTC",
                        "loggingConfig": null,
                        "orderedCacheBehaviors": [],
                        "origins": [
                            {
                                "connectionAttempts": 3,
                                "connectionTimeout": 10,
                                "customHeaders": [],
                                "customOriginConfig": null,
                                "domainName": "snapshare-michael-snapsharewebassets-hbnbdxnx.s3.us-west-2.amazonaws.com",
                                "originAccessControlId": "",
                                "originId": "s3",
                                "originPath": "",
                                "originShield": null,
                                "s3OriginConfig": {
                                    "originAccessIdentity": "origin-access-identity/cloudfront/E4IQVGDM98XKI"
                                }
                            }
                        ],
                        "priceClass": "PriceClass_All",
                        "restrictions": {
                            "geoRestriction": {
                                "locations": [],
                                "restrictionType": "none"
                            }
                        },
                        "retainOnDelete": false,
                        "staging": false,
                        "status": "InProgress",
                        "tags": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "tagsAll": {
                            "sst:app": "snapshare",
                            "sst:stage": "michael"
                        },
                        "trustedKeyGroups": [
                            {
                                "enabled": false,
                                "items": []
                            }
                        ],
                        "trustedSigners": [
                            {
                                "enabled": false,
                                "items": []
                            }
                        ],
                        "viewerCertificate": {
                            "acmCertificateArn": "",
                            "cloudfrontDefaultCertificate": true,
                            "iamCertificateId": "",
                            "minimumProtocolVersion": "TLSv1",
                            "sslSupportMethod": ""
                        },
                        "waitForDeployment": false,
                        "webAclId": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN::SnapshareWebCdn",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$aws:cloudfront/originAccessIdentity:OriginAccessIdentity::SnapshareWebOriginAccessIdentity",
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "aliases": [],
                        "comment": [],
                        "customErrorResponses": [],
                        "defaultCacheBehavior": [],
                        "defaultRootObject": [],
                        "enabled": [],
                        "origins": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareWebAssetsBucket",
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$aws:cloudfront/originAccessIdentity:OriginAccessIdentity::SnapshareWebOriginAccessIdentity"
                        ],
                        "restrictions": [],
                        "viewerCertificate": [],
                        "waitForDeployment": []
                    },
                    "created": "2024-03-31T00:42:45.441398497Z",
                    "modified": "2024-03-31T00:42:45.441398497Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/cdn.ts#236,14"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVcsmCodeUpdater.sst.aws.FunctionCodeUpdater",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerVcsmFunction",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "functionLastModified": "2024-03-31T07:00:09.000+0000",
                        "functionName": "snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "region": "us-west-2",
                        "s3Bucket": "sst-asset-bmkfhcwonufc",
                        "s3Key": "assets/SnapShareApiHandlerVcsm-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip"
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "version": "$LATEST"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerVcsm",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVcsmFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerVcsmCode"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default::d34d9000-780b-49cf-aea4-39a881a7437a",
                    "propertyDependencies": {
                        "__provider": [],
                        "functionLastModified": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVcsmFunction"
                        ],
                        "functionName": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVcsmFunction"
                        ],
                        "region": [],
                        "s3Bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerVcsmCode"
                        ],
                        "s3Key": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerVcsmCode"
                        ]
                    },
                    "created": "2024-03-31T03:41:26.722307258Z",
                    "modified": "2024-03-31T07:00:17.048027596Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/providers/function-code-updater.ts#110,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerNohfCodeUpdater.sst.aws.FunctionCodeUpdater",
                    "custom": true,
                    "id": "snapshare-michael-SnapShareApiHandlerNohfFunction",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "functionLastModified": "2024-03-31T07:00:10.000+0000",
                        "functionName": "snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "region": "us-west-2",
                        "s3Bucket": "sst-asset-bmkfhcwonufc",
                        "s3Key": "assets/SnapShareApiHandlerNohf-code-4b0537142e367253904a150c697eae87c00127850264ed412157663d29eac38c.zip"
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"updateCode\", { configurable: true, writable: true, value: __f4 });\nvar __f25_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f25_prototype, \"constructor\", { configurable: true, writable: true, value: __f25 });\nObject.defineProperty(__f25_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f26 });\nObject.defineProperty(__f25_prototype, \"serialize\", { configurable: true, writable: true, value: __f27 });\nObject.defineProperty(__f25_prototype, \"deserialize\", { configurable: true, writable: true, value: __f28 });\nObject.defineProperty(__f25, \"prototype\", { value: __f25_prototype });\nObject.defineProperty(__f25, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f29 });\nObject.setPrototypeOf(__f25, __f19);\nObject.defineProperty(__provider_proto, \"waitForUpdate\", { configurable: true, writable: true, value: __f24 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        const version = await this.updateCode(inputs);\n        await this.waitForUpdate(inputs);\n        return {\n          id: inputs.functionName,\n          outs: { version }\n        };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        const version = await this.updateCode(news);\n        await this.waitForUpdate(news);\n        return { outs: { version } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst eventstream_serde_config_resolver_1 = require(\"@smithy/eventstream-serde-config-resolver/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-lambda/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-lambda/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_7);\n    const _config_9 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_8, configuration?.extensions || []);\n    __super.call(this, _config_9);\n    this.config = _config_9;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_0_1 = require(\"@aws-sdk/client-lambda/dist-cjs/models/models_0.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ UpdateFunctionCodeCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"UpdateFunctionCodeCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,\n        outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"UpdateFunctionCode\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restJson1_1 = require(\"@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_UpdateFunctionCodeCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_UpdateFunctionCodeCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, UpdateFunctionCodeCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*updateCode*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new UpdateFunctionCodeCommand({\n            FunctionName: inputs.functionName,\n            S3Bucket: inputs.s3Bucket,\n            S3Key: inputs.s3Key\n          })\n        );\n        return ret.Version ?? \"unknown\";\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ GetFunctionCommand: __f25, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"LambdaClient\";\n    const commandName = \"GetFunctionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"AWSGirApiService\",\n            operation: \"GetFunction\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restJson1_1.se_GetFunctionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restJson1_1.de_GetFunctionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f29() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0) {\n  return (function() {\n    with({ useClient: __f5, LambdaClient: __f13, GetFunctionCommand: __f25, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForUpdate*/(inputs) {\n        const client = useClient(LambdaClient, {\n          region: inputs.region,\n          retrableErrors: [\n            // Lambda is not ready to accept updates right after creation\n            \"ServiceException\"\n          ]\n        });\n        const ret = await client.send(\n          new GetFunctionCommand({\n            FunctionName: inputs.functionName\n          })\n        );\n        if (ret.Configuration?.LastUpdateStatus === \"Successful\")\n          return;\n        if (ret.Configuration?.LastUpdateStatus === \"Failed\") {\n          throw new Error(\n            `Failed to update function ${ret.Configuration.LastUpdateStatusReasonCode}: ${ret.Configuration.LastUpdateStatusReason}`\n          );\n        }\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return this.waitForUpdate(inputs);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "version": "$LATEST"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function::SnapShareApiHandlerNohf",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerNohfFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerNohfCode"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default::d34d9000-780b-49cf-aea4-39a881a7437a",
                    "propertyDependencies": {
                        "__provider": [],
                        "functionLastModified": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerNohfFunction"
                        ],
                        "functionName": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerNohfFunction"
                        ],
                        "region": [],
                        "s3Bucket": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerNohfCode"
                        ],
                        "s3Key": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:s3/bucketObjectv2:BucketObjectv2::SnapShareApiHandlerNohfCode"
                        ]
                    },
                    "created": "2024-03-31T03:42:09.240365974Z",
                    "modified": "2024-03-31T07:00:17.576292495Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/providers/function-code-updater.ts#110,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerVhbbPermissions",
                    "custom": true,
                    "id": "SnapShareApiHandlerVhbbPermissions-320dc6c",
                    "type": "aws:lambda/permission:Permission",
                    "inputs": {
                        "__defaults": [
                            "statementId"
                        ],
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "principal": "apigateway.amazonaws.com",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerVhbbPermissions-320dc6c"
                    },
                    "outputs": {
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "id": "SnapShareApiHandlerVhbbPermissions-320dc6c",
                        "principal": "apigateway.amazonaws.com",
                        "qualifier": "",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerVhbbPermissions-320dc6c",
                        "statementIdPrefix": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVhbbFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVhbbCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "action": [],
                        "function": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVhbbCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVhbbFunction"
                        ],
                        "principal": [],
                        "sourceArn": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ]
                    },
                    "created": "2024-03-31T03:41:32.59420084Z",
                    "modified": "2024-03-31T03:41:32.59420084Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#673,24"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerMahfPermissions",
                    "custom": true,
                    "id": "SnapShareApiHandlerMahfPermissions-13d47c4",
                    "type": "aws:lambda/permission:Permission",
                    "inputs": {
                        "__defaults": [
                            "statementId"
                        ],
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "principal": "apigateway.amazonaws.com",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerMahfPermissions-13d47c4"
                    },
                    "outputs": {
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "id": "SnapShareApiHandlerMahfPermissions-13d47c4",
                        "principal": "apigateway.amazonaws.com",
                        "qualifier": "",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerMahfPermissions-13d47c4",
                        "statementIdPrefix": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMahfFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMahfCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "action": [],
                        "function": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMahfCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMahfFunction"
                        ],
                        "principal": [],
                        "sourceArn": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ]
                    },
                    "created": "2024-03-31T03:42:03.872900932Z",
                    "modified": "2024-03-31T03:42:03.872900932Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#673,24"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerMbktPermissions",
                    "custom": true,
                    "id": "SnapShareApiHandlerMbktPermissions-0cc9817",
                    "type": "aws:lambda/permission:Permission",
                    "inputs": {
                        "__defaults": [
                            "statementId"
                        ],
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "principal": "apigateway.amazonaws.com",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerMbktPermissions-0cc9817"
                    },
                    "outputs": {
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "id": "SnapShareApiHandlerMbktPermissions-0cc9817",
                        "principal": "apigateway.amazonaws.com",
                        "qualifier": "",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerMbktPermissions-0cc9817",
                        "statementIdPrefix": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMbktFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMbktCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "action": [],
                        "function": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMbktCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMbktFunction"
                        ],
                        "principal": [],
                        "sourceArn": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ]
                    },
                    "created": "2024-03-31T03:41:21.602302835Z",
                    "modified": "2024-03-31T03:41:21.602302835Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#673,24"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerEsbdPermissions",
                    "custom": true,
                    "id": "SnapShareApiHandlerEsbdPermissions-836bef5",
                    "type": "aws:lambda/permission:Permission",
                    "inputs": {
                        "__defaults": [
                            "statementId"
                        ],
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "principal": "apigateway.amazonaws.com",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerEsbdPermissions-836bef5"
                    },
                    "outputs": {
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "id": "SnapShareApiHandlerEsbdPermissions-836bef5",
                        "principal": "apigateway.amazonaws.com",
                        "qualifier": "",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerEsbdPermissions-836bef5",
                        "statementIdPrefix": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerEsbdFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerEsbdCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "action": [],
                        "function": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerEsbdCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerEsbdFunction"
                        ],
                        "principal": [],
                        "sourceArn": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ]
                    },
                    "created": "2024-03-31T03:54:50.344858992Z",
                    "modified": "2024-03-31T03:54:50.344858992Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#673,24"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerVcsmPermissions",
                    "custom": true,
                    "id": "SnapShareApiHandlerVcsmPermissions-7209a1c",
                    "type": "aws:lambda/permission:Permission",
                    "inputs": {
                        "__defaults": [
                            "statementId"
                        ],
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "principal": "apigateway.amazonaws.com",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerVcsmPermissions-7209a1c"
                    },
                    "outputs": {
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "id": "SnapShareApiHandlerVcsmPermissions-7209a1c",
                        "principal": "apigateway.amazonaws.com",
                        "qualifier": "",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerVcsmPermissions-7209a1c",
                        "statementIdPrefix": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVcsmFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVcsmCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "action": [],
                        "function": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVcsmCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVcsmFunction"
                        ],
                        "principal": [],
                        "sourceArn": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ]
                    },
                    "created": "2024-03-31T03:41:26.931500894Z",
                    "modified": "2024-03-31T03:41:26.931500894Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#673,24"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN$pulumi-nodejs:dynamic:Resource::SnapshareWebCdnWaiter.sst.aws.DistributionDeploymentWaiter",
                    "custom": true,
                    "id": "waiter",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"handle\", { configurable: true, writable: true, value: __f4 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        await this.handle(inputs);\n        return { id: \"waiter\", outs: { isDone: true } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        await this.handle(news);\n        return { outs: { isDone: true } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);\n    __super.call(this, _config_8);\n    this.config = _config_8;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_1_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/models/models_1.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ GetDistributionCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDistributionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"CloudFrontClient\";\n    const commandName = \"GetDistributionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_1_1.GetDistributionResultFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"Cloudfront2020_05_31\",\n            operation: \"GetDistribution\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restXml_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/protocols/Aws_restXml.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restXml_1.se_GetDistributionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restXml_1.de_GetDistributionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, CloudFrontClient: __f13, GetDistributionCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*handle*/(inputs) {\n        if (!inputs.wait)\n          return;\n        const { distributionId } = inputs;\n        const client = useClient(CloudFrontClient);\n        const start = Date.now();\n        do {\n          const result2 = await client.send(\n            new GetDistributionCommand({\n              Id: distributionId\n            })\n          );\n          if (result2.Distribution?.Status === \"Deployed\")\n            return;\n          await new Promise((resolve) => setTimeout(resolve, 5e3));\n        } while (Date.now() - start < 3e5);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "distributionId": "E1KUQARMXXCHAM",
                        "etag": "E27OAG2WPZRY34",
                        "wait": false
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nvar __f18_prototype_proto = {};\nObject.defineProperty(__f18_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f19 });\nvar __f18_prototype = Object.create(__f18_prototype_proto);\nObject.defineProperty(__f18_prototype, \"constructor\", { configurable: true, writable: true, value: __f18 });\nObject.defineProperty(__f18_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f18_prototype, \"serialize\", { configurable: true, writable: true, value: __f21 });\nObject.defineProperty(__f18_prototype, \"deserialize\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f18, \"prototype\", { value: __f18_prototype });\nObject.defineProperty(__f18, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f23 });\nObject.setPrototypeOf(__f18, __f19);\nObject.defineProperty(__provider_proto, \"handle\", { configurable: true, writable: true, value: __f4 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        await this.handle(inputs);\n        return { id: \"waiter\", outs: { isDone: true } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        await this.handle(news);\n        return { outs: { isDone: true } };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);\n    __super.call(this, _config_8);\n    this.config = _config_8;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst models_1_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/models/models_1.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f20(__0, __1, __2) {\n  return (function() {\n    with({ GetDistributionCommand: __f18, __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDistributionCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"CloudFrontClient\";\n    const commandName = \"GetDistributionCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: models_1_1.GetDistributionResultFilterSensitiveLog,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"Cloudfront2020_05_31\",\n            operation: \"GetDistribution\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restXml_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/protocols/Aws_restXml.js\");\n\nfunction __f21(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restXml_1.se_GetDistributionCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f22(__0, __1) {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restXml_1.de_GetDistributionCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f23() {\n  return (function() {\n    with({ __super: __f19, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, CloudFrontClient: __f13, GetDistributionCommand: __f18, this: undefined, arguments: undefined }) {\n\nreturn async function /*handle*/(inputs) {\n        if (!inputs.wait)\n          return;\n        const { distributionId } = inputs;\n        const client = useClient(CloudFrontClient);\n        const start = Date.now();\n        do {\n          const result2 = await client.send(\n            new GetDistributionCommand({\n              Id: distributionId\n            })\n          );\n          if (result2.Distribution?.Status === \"Deployed\")\n            return;\n          await new Promise((resolve) => setTimeout(resolve, 5e3));\n        } while (Date.now() - start < 3e5);\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "isDone": true
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN::SnapshareWebCdn",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::SnapshareWebCdnDistribution"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default::d34d9000-780b-49cf-aea4-39a881a7437a",
                    "propertyDependencies": {
                        "__provider": [],
                        "distributionId": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::SnapshareWebCdnDistribution"
                        ],
                        "etag": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::SnapshareWebCdnDistribution"
                        ],
                        "wait": []
                    },
                    "created": "2024-03-31T00:42:45.538338263Z",
                    "modified": "2024-03-31T00:42:45.538338263Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/providers/distribution-deployment-waiter.ts#72,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:StaticSite$pulumi-nodejs:dynamic:Resource::SnapshareWebInvalidation.sst.aws.DistributionInvalidation",
                    "custom": true,
                    "id": "invalidation",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nObject.defineProperty(__provider_proto, \"handle\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__provider_proto, \"invalidate\", { configurable: true, writable: true, value: __f18 });\nvar __f20_prototype_proto = {};\nObject.defineProperty(__f20_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f21 });\nvar __f20_prototype = Object.create(__f20_prototype_proto);\nObject.defineProperty(__f20_prototype, \"constructor\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f20_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f20_prototype, \"serialize\", { configurable: true, writable: true, value: __f23 });\nObject.defineProperty(__f20_prototype, \"deserialize\", { configurable: true, writable: true, value: __f24 });\nObject.defineProperty(__f20, \"prototype\", { value: __f20_prototype });\nObject.defineProperty(__f20, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f25 });\nObject.setPrototypeOf(__f20, __f21);\nObject.defineProperty(__provider_proto, \"invalidateChunk\", { configurable: true, writable: true, value: __f19 });\nObject.defineProperty(__provider_proto, \"waitForInvalidation\", { configurable: true, writable: true, value: __f26 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        await this.handle(inputs);\n        return { id: \"invalidation\" };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        await this.handle(news);\n        return {};\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);\n    __super.call(this, _config_8);\n    this.config = _config_8;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, CloudFrontClient2: __f13, this: undefined, arguments: undefined }) {\n\nreturn async function /*handle*/(inputs) {\n        const client = useClient(CloudFrontClient2);\n        const ids = await this.invalidate(client, inputs);\n        if (inputs.wait) {\n          await this.waitForInvalidation(client, inputs, ids);\n        }\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0, __1) {\n  return (function() {\n    with({ FILE_LIMIT: 3000, WILDCARD_LIMIT: 15, this: undefined, arguments: undefined }) {\n\nreturn async function /*invalidate*/(client, inputs) {\n        const { distributionId, paths } = inputs;\n        const pathsFile = [];\n        const pathsWildcard = [];\n        for (const path17 of paths) {\n          if (path17.trim().endsWith(\"*\")) {\n            pathsWildcard.push(path17);\n          } else {\n            pathsFile.push(path17);\n          }\n        }\n        const stepsCount = Math.max(\n          Math.ceil(pathsFile.length / FILE_LIMIT),\n          Math.ceil(pathsWildcard.length / WILDCARD_LIMIT)\n        );\n        const invalidationIds = [];\n        for (let i = 0; i < stepsCount; i++) {\n          const stepPaths = [\n            ...pathsFile.slice(i * FILE_LIMIT, (i + 1) * FILE_LIMIT),\n            ...pathsWildcard.slice(i * WILDCARD_LIMIT, (i + 1) * WILDCARD_LIMIT)\n          ];\n          invalidationIds.push(\n            await this.invalidateChunk(client, distributionId, stepPaths)\n          );\n        }\n        return invalidationIds;\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f21() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f20(__0) {\n  return (function() {\n    with({ __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f22(__0, __1, __2) {\n  return (function() {\n    with({ CreateInvalidationCommand: __f20, __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateInvalidationCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"CloudFrontClient\";\n    const commandName = \"CreateInvalidationCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: (_) => _,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"Cloudfront2020_05_31\",\n            operation: \"CreateInvalidation\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restXml_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/protocols/Aws_restXml.js\");\n\nfunction __f23(__0, __1) {\n  return (function() {\n    with({ __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restXml_1.se_CreateInvalidationCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0, __1) {\n  return (function() {\n    with({ __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restXml_1.de_CreateInvalidationCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25() {\n  return (function() {\n    with({ __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19(__0, __1, __2) {\n  return (function() {\n    with({ CreateInvalidationCommand: __f20, this: undefined, arguments: undefined }) {\n\nreturn async function /*invalidateChunk*/(client, distributionId, paths) {\n        const result2 = await client.send(\n          new CreateInvalidationCommand({\n            DistributionId: distributionId,\n            InvalidationBatch: {\n              CallerReference: Date.now().toString(),\n              Paths: {\n                Quantity: paths.length,\n                Items: paths\n              }\n            }\n          })\n        );\n        const invalidationId = result2.Invalidation?.Id;\n        if (!invalidationId) {\n          throw new Error(\"Invalidation ID not found\");\n        }\n        return invalidationId;\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst GetInvalidationCommand_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/commands/GetInvalidationCommand.js\");\nconst util_waiter_1 = require(\"@smithy/util-waiter/dist-cjs/index.js\");\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new GetInvalidationCommand_1.GetInvalidationCommand(input));\n        reason = result;\n        try {\n            const returnComparator = () => {\n                return result.Invalidation.Status;\n            };\n            if (returnComparator() === \"Completed\") {\n                return { state: util_waiter_1.WaiterState.SUCCESS, reason };\n            }\n        }\n        catch (e) { }\n    }\n    catch (exception) {\n        reason = exception;\n    }\n    return { state: util_waiter_1.WaiterState.RETRY, reason };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ checkState: __f28, this: undefined, arguments: undefined }) {\n\nreturn async (params, input) => {\n    const serviceDefaults = { minDelay: 20, maxDelay: 120 };\n    const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n    return (0, util_waiter_1.checkExceptions)(result);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ waitUntilInvalidationCompleted: __f27, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForInvalidation*/(client, inputs, invalidationIds) {\n        const { distributionId } = inputs;\n        for (const invalidationId of invalidationIds) {\n          try {\n            await waitUntilInvalidationCompleted(\n              {\n                client,\n                maxWaitTime: 600\n              },\n              {\n                DistributionId: distributionId,\n                Id: invalidationId\n              }\n            );\n          } catch (e) {\n          }\n        }\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "distributionId": "E1KUQARMXXCHAM",
                        "paths": [
                            "/*"
                        ],
                        "version": "391ebb4c8dada0793c3d9a1ef3bb1a58",
                        "wait": false
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f3 });\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"shouldRetry\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getMaxAttempts\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"retry\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __f14_prototype = {};\nObject.defineProperty(__f14_prototype, \"constructor\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f14_prototype, \"send\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f14_prototype, \"destroy\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__f14, \"prototype\", { value: __f14_prototype });\nvar __f13_prototype = Object.create(__f14_prototype);\nObject.defineProperty(__f13_prototype, \"constructor\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f13_prototype, \"destroy\", { configurable: true, writable: true, value: __f17 });\nObject.defineProperty(__f13, \"prototype\", { value: __f13_prototype });\nObject.setPrototypeOf(__f13, __f14);\nObject.defineProperty(__provider_proto, \"handle\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__provider_proto, \"invalidate\", { configurable: true, writable: true, value: __f18 });\nvar __f20_prototype_proto = {};\nObject.defineProperty(__f20_prototype_proto, \"constructor\", { configurable: true, writable: true, value: __f21 });\nvar __f20_prototype = Object.create(__f20_prototype_proto);\nObject.defineProperty(__f20_prototype, \"constructor\", { configurable: true, writable: true, value: __f20 });\nObject.defineProperty(__f20_prototype, \"resolveMiddleware\", { configurable: true, writable: true, value: __f22 });\nObject.defineProperty(__f20_prototype, \"serialize\", { configurable: true, writable: true, value: __f23 });\nObject.defineProperty(__f20_prototype, \"deserialize\", { configurable: true, writable: true, value: __f24 });\nObject.defineProperty(__f20, \"prototype\", { value: __f20_prototype });\nObject.defineProperty(__f20, \"getEndpointParameterInstructions\", { configurable: true, writable: true, value: __f25 });\nObject.setPrototypeOf(__f20, __f21);\nObject.defineProperty(__provider_proto, \"invalidateChunk\", { configurable: true, writable: true, value: __f19 });\nObject.defineProperty(__provider_proto, \"waitForInvalidation\", { configurable: true, writable: true, value: __f26 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*create*/(inputs) {\n        await this.handle(inputs);\n        return { id: \"invalidation\" };\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*update*/(id, olds, news) {\n        await this.handle(news);\n        return {};\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn () => /* @__PURE__ */ new Map();\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ loaded: false, result2: undefined, callback: __f7, this: undefined, arguments: undefined }) {\n\nreturn () => {\n    if (!loaded) {\n      result2 = callback();\n      loaded = true;\n    }\n    return result2;\n  };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst util_retry_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/util-retry/dist-cjs/index.js\");\nconst retryDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js\");\nconst delayDecider_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js\");\nconst defaultRetryQuota_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js\");\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = util_retry_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*shouldRetry*/(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async function /*getMaxAttempts*/() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst protocol_http_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/protocol-http/dist-cjs/index.js\");\n\nfunction __f12(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn (response) => {\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/dist-cjs/util.js\");\nconst service_error_classification_1 = require(\"@aws-sdk/middleware-retry/node_modules/@smithy/middleware-retry/node_modules/@smithy/service-error-classification/dist-cjs/index.js\");\n\nfunction __f11(__0, __1, __2) {\n  return (function() {\n    with({ getDelayFromRetryAfterHeader: __f12, this: undefined, arguments: undefined }) {\n\nreturn async function /*retry*/(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = (0, util_1.asSdkError)(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ useClientCache: __f6, StandardRetryStrategy: __f8, this: undefined, arguments: undefined }) {\n\nreturn (client, opts) => {\n      const cache = useClientCache();\n      const existing = cache.get(client.name);\n      if (existing)\n        return existing;\n      const printNoInternet = /* @__PURE__ */ (() => {\n        let lastPrinted = 0;\n        return () => {\n          const now = Date.now();\n          if (now - lastPrinted > 5e3) {\n            console.log(\"Waiting for internet connection...\");\n            lastPrinted = now;\n          }\n        };\n      })();\n      const result2 = new client({\n        region: opts?.region,\n        retryStrategy: new StandardRetryStrategy(async () => 1e4, {\n          retryDecider: (e) => {\n            if (e.code === \"ENOTFOUND\") {\n              printNoInternet();\n              return true;\n            }\n            if ([\n              \"ThrottlingException\",\n              \"Throttling\",\n              \"TooManyRequestsException\",\n              \"OperationAbortedException\",\n              \"TimeoutError\",\n              \"NetworkingError\",\n              ...opts?.retrableErrors ?? []\n            ].includes(e.name)) {\n              return true;\n            }\n            return false;\n          },\n          delayDecider: (_, attempts) => {\n            return Math.min(1.5 ** attempts * 100, 5e3);\n          },\n          // AWS SDK v3 has an idea of \"retry tokens\" which are used to\n          // prevent multiple retries from happening at the same time.\n          // This is a workaround to disable that.\n          retryQuota: {\n            hasRetryTokens: () => true,\n            releaseRetryTokens: () => {\n            },\n            retrieveRetryTokens: () => 1\n          }\n        })\n      });\n      cache.set(client.name, result2);\n      return result2;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_stack_1 = require(\"@smithy/middleware-stack/dist-cjs/index.js\");\n\nfunction __f14(__0) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(config) {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n        this.config = config;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*send*/(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst runtimeConfig_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/runtimeConfig.js\");\nconst EndpointParameters_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/endpoint/EndpointParameters.js\");\nconst config_resolver_1 = require(\"@smithy/config-resolver/dist-cjs/index.js\");\nconst middleware_endpoint_1 = require(\"@smithy/middleware-endpoint/dist-cjs/index.js\");\nconst middleware_retry_1 = require(\"@smithy/middleware-retry/dist-cjs/index.js\");\nconst middleware_host_header_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\");\nconst middleware_signing_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\");\nconst runtimeExtensions_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/runtimeExtensions.js\");\nconst middleware_content_length_1 = require(\"@smithy/middleware-content-length/dist-cjs/index.js\");\nconst middleware_logger_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\");\nconst middleware_recursion_detection_1 = require(\"@aws-sdk/client-cloudfront/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\");\n\nfunction __f13() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(...[configuration]) {\n    const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});\n    const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);\n    const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);\n    const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);\n    const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);\n    const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);\n    const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);\n    const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);\n    const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);\n    __super.call(this, _config_8);\n    this.config = _config_8;\n    this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));\n    this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17() {\n  return (function() {\n    with({ __super: __f14, this: undefined, arguments: undefined }) {\n\nreturn function /*destroy*/() {\n    __super.prototype.destroy.call(this);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ useClient: __f5, CloudFrontClient2: __f13, this: undefined, arguments: undefined }) {\n\nreturn async function /*handle*/(inputs) {\n        const client = useClient(CloudFrontClient2);\n        const ids = await this.invalidate(client, inputs);\n        if (inputs.wait) {\n          await this.waitForInvalidation(client, inputs, ids);\n        }\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f18(__0, __1) {\n  return (function() {\n    with({ FILE_LIMIT: 3000, WILDCARD_LIMIT: 15, this: undefined, arguments: undefined }) {\n\nreturn async function /*invalidate*/(client, inputs) {\n        const { distributionId, paths } = inputs;\n        const pathsFile = [];\n        const pathsWildcard = [];\n        for (const path17 of paths) {\n          if (path17.trim().endsWith(\"*\")) {\n            pathsWildcard.push(path17);\n          } else {\n            pathsFile.push(path17);\n          }\n        }\n        const stepsCount = Math.max(\n          Math.ceil(pathsFile.length / FILE_LIMIT),\n          Math.ceil(pathsWildcard.length / WILDCARD_LIMIT)\n        );\n        const invalidationIds = [];\n        for (let i = 0; i < stepsCount; i++) {\n          const stepPaths = [\n            ...pathsFile.slice(i * FILE_LIMIT, (i + 1) * FILE_LIMIT),\n            ...pathsWildcard.slice(i * WILDCARD_LIMIT, (i + 1) * WILDCARD_LIMIT)\n          ];\n          invalidationIds.push(\n            await this.invalidateChunk(client, distributionId, stepPaths)\n          );\n        }\n        return invalidationIds;\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f21() {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/() {\n        this.middlewareStack = (0, middleware_stack_1.constructStack)();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f20(__0) {\n  return (function() {\n    with({ __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*constructor*/(input) {\n    __super.call(this);\n    this.input = input;\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst middleware_serde_1 = require(\"@smithy/middleware-serde/dist-cjs/index.js\");\nconst types_1 = require(\"@smithy/types/dist-cjs/index.js\");\n\nfunction __f22(__0, __1, __2) {\n  return (function() {\n    with({ CreateInvalidationCommand: __f20, __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*resolveMiddleware*/(clientStack, configuration, options) {\n    this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateInvalidationCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const { logger } = configuration;\n    const clientName = \"CloudFrontClient\";\n    const commandName = \"CreateInvalidationCommand\";\n    const handlerExecutionContext = {\n        logger,\n        clientName,\n        commandName,\n        inputFilterSensitiveLog: (_) => _,\n        outputFilterSensitiveLog: (_) => _,\n        [types_1.SMITHY_CONTEXT_KEY]: {\n            service: \"Cloudfront2020_05_31\",\n            operation: \"CreateInvalidation\",\n        },\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst Aws_restXml_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/protocols/Aws_restXml.js\");\n\nfunction __f23(__0, __1) {\n  return (function() {\n    with({ __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*serialize*/(input, context) {\n    return (0, Aws_restXml_1.se_CreateInvalidationCommand)(input, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f24(__0, __1) {\n  return (function() {\n    with({ __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*deserialize*/(output, context) {\n    return (0, Aws_restXml_1.de_CreateInvalidationCommand)(output, context);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f25() {\n  return (function() {\n    with({ __super: __f21, this: undefined, arguments: undefined }) {\n\nreturn function /*getEndpointParameterInstructions*/() {\n    return {\n        UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n        Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n        Region: { type: \"builtInParams\", name: \"region\" },\n        UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n    };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f19(__0, __1, __2) {\n  return (function() {\n    with({ CreateInvalidationCommand: __f20, this: undefined, arguments: undefined }) {\n\nreturn async function /*invalidateChunk*/(client, distributionId, paths) {\n        const result2 = await client.send(\n          new CreateInvalidationCommand({\n            DistributionId: distributionId,\n            InvalidationBatch: {\n              CallerReference: Date.now().toString(),\n              Paths: {\n                Quantity: paths.length,\n                Items: paths\n              }\n            }\n          })\n        );\n        const invalidationId = result2.Invalidation?.Id;\n        if (!invalidationId) {\n          throw new Error(\"Invalidation ID not found\");\n        }\n        return invalidationId;\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\nconst GetInvalidationCommand_1 = require(\"@aws-sdk/client-cloudfront/dist-cjs/commands/GetInvalidationCommand.js\");\nconst util_waiter_1 = require(\"@smithy/util-waiter/dist-cjs/index.js\");\n\nfunction __f28(__0, __1) {\n  return (function() {\n    with({ this: undefined, arguments: undefined }) {\n\nreturn async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new GetInvalidationCommand_1.GetInvalidationCommand(input));\n        reason = result;\n        try {\n            const returnComparator = () => {\n                return result.Invalidation.Status;\n            };\n            if (returnComparator() === \"Completed\") {\n                return { state: util_waiter_1.WaiterState.SUCCESS, reason };\n            }\n        }\n        catch (e) { }\n    }\n    catch (exception) {\n        reason = exception;\n    }\n    return { state: util_waiter_1.WaiterState.RETRY, reason };\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f27(__0, __1) {\n  return (function() {\n    with({ checkState: __f28, this: undefined, arguments: undefined }) {\n\nreturn async (params, input) => {\n    const serviceDefaults = { minDelay: 20, maxDelay: 120 };\n    const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n    return (0, util_waiter_1.checkExceptions)(result);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f26(__0, __1, __2) {\n  return (function() {\n    with({ waitUntilInvalidationCompleted: __f27, this: undefined, arguments: undefined }) {\n\nreturn async function /*waitForInvalidation*/(client, inputs, invalidationIds) {\n        const { distributionId } = inputs;\n        for (const invalidationId of invalidationIds) {\n          try {\n            await waitUntilInvalidationCompleted(\n              {\n                client,\n                maxWaitTime: 600\n              },\n              {\n                DistributionId: distributionId,\n                Id: invalidationId\n              }\n            );\n          } catch (e) {\n          }\n        }\n      };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider, this: undefined, arguments: undefined }) {\n\nreturn () => provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:StaticSite::SnapshareWeb",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::SnapshareWebCdnDistribution"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:pulumi-nodejs::default::d34d9000-780b-49cf-aea4-39a881a7437a",
                    "propertyDependencies": {
                        "__provider": [],
                        "distributionId": [
                            "urn:pulumi:michael::snapshare::sst:aws:StaticSite$sst:aws:CDN$aws:cloudfront/distribution:Distribution::SnapshareWebCdnDistribution"
                        ],
                        "paths": [],
                        "version": [],
                        "wait": []
                    },
                    "created": "2024-03-31T00:42:46.005768863Z",
                    "modified": "2024-03-31T00:42:46.005768863Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/providers/distribution-invalidation.ts#141,5"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationMbkt",
                    "custom": true,
                    "id": "hbkwqo0",
                    "type": "aws:apigatewayv2/integration:Integration",
                    "inputs": {
                        "__defaults": [
                            "connectionType",
                            "passthroughBehavior"
                        ],
                        "apiId": "7a3gm3zph1",
                        "connectionType": "INTERNET",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "passthroughBehavior": "WHEN_NO_MATCH",
                        "payloadFormatVersion": "2.0"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "connectionId": "",
                        "connectionType": "INTERNET",
                        "contentHandlingStrategy": "",
                        "credentialsArn": "",
                        "description": "",
                        "id": "hbkwqo0",
                        "integrationMethod": "POST",
                        "integrationResponseSelectionExpression": "",
                        "integrationSubtype": "",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMbktFunction",
                        "passthroughBehavior": "",
                        "payloadFormatVersion": "2.0",
                        "requestParameters": {},
                        "requestTemplates": {},
                        "responseParameters": [],
                        "templateSelectionExpression": "",
                        "timeoutMilliseconds": 30000,
                        "tlsConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerMbktPermissions",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMbktFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMbktCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "integrationType": [],
                        "integrationUri": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMbktCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMbktFunction"
                        ],
                        "payloadFormatVersion": []
                    },
                    "created": "2024-03-31T03:41:21.882733066Z",
                    "modified": "2024-03-31T03:41:21.882733066Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#683,25"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationEsbd",
                    "custom": true,
                    "id": "egpdvpq",
                    "type": "aws:apigatewayv2/integration:Integration",
                    "inputs": {
                        "__defaults": [
                            "connectionType",
                            "passthroughBehavior"
                        ],
                        "apiId": "7a3gm3zph1",
                        "connectionType": "INTERNET",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "passthroughBehavior": "WHEN_NO_MATCH",
                        "payloadFormatVersion": "2.0"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "connectionId": "",
                        "connectionType": "INTERNET",
                        "contentHandlingStrategy": "",
                        "credentialsArn": "",
                        "description": "",
                        "id": "egpdvpq",
                        "integrationMethod": "POST",
                        "integrationResponseSelectionExpression": "",
                        "integrationSubtype": "",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerEsbdFunction",
                        "passthroughBehavior": "",
                        "payloadFormatVersion": "2.0",
                        "requestParameters": {},
                        "requestTemplates": {},
                        "responseParameters": [],
                        "templateSelectionExpression": "",
                        "timeoutMilliseconds": 30000,
                        "tlsConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerEsbdPermissions",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerEsbdFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerEsbdCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "integrationType": [],
                        "integrationUri": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerEsbdCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerEsbdFunction"
                        ],
                        "payloadFormatVersion": []
                    },
                    "created": "2024-03-31T03:54:50.727058773Z",
                    "modified": "2024-03-31T03:54:50.727058773Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#683,25"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationMahf",
                    "custom": true,
                    "id": "yjlyhpi",
                    "type": "aws:apigatewayv2/integration:Integration",
                    "inputs": {
                        "__defaults": [
                            "connectionType",
                            "passthroughBehavior"
                        ],
                        "apiId": "7a3gm3zph1",
                        "connectionType": "INTERNET",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "passthroughBehavior": "WHEN_NO_MATCH",
                        "payloadFormatVersion": "2.0"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "connectionId": "",
                        "connectionType": "INTERNET",
                        "contentHandlingStrategy": "",
                        "credentialsArn": "",
                        "description": "",
                        "id": "yjlyhpi",
                        "integrationMethod": "POST",
                        "integrationResponseSelectionExpression": "",
                        "integrationSubtype": "",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerMahfFunction",
                        "passthroughBehavior": "",
                        "payloadFormatVersion": "2.0",
                        "requestParameters": {},
                        "requestTemplates": {},
                        "responseParameters": [],
                        "templateSelectionExpression": "",
                        "timeoutMilliseconds": 30000,
                        "tlsConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerMahfPermissions",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMahfFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMahfCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "integrationType": [],
                        "integrationUri": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerMahfCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerMahfFunction"
                        ],
                        "payloadFormatVersion": []
                    },
                    "created": "2024-03-31T03:42:04.182528222Z",
                    "modified": "2024-03-31T03:42:04.182528222Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#683,25"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationVcsm",
                    "custom": true,
                    "id": "tl7vsam",
                    "type": "aws:apigatewayv2/integration:Integration",
                    "inputs": {
                        "__defaults": [
                            "connectionType",
                            "passthroughBehavior"
                        ],
                        "apiId": "7a3gm3zph1",
                        "connectionType": "INTERNET",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "passthroughBehavior": "WHEN_NO_MATCH",
                        "payloadFormatVersion": "2.0"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "connectionId": "",
                        "connectionType": "INTERNET",
                        "contentHandlingStrategy": "",
                        "credentialsArn": "",
                        "description": "",
                        "id": "tl7vsam",
                        "integrationMethod": "POST",
                        "integrationResponseSelectionExpression": "",
                        "integrationSubtype": "",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVcsmFunction",
                        "passthroughBehavior": "",
                        "payloadFormatVersion": "2.0",
                        "requestParameters": {},
                        "requestTemplates": {},
                        "responseParameters": [],
                        "templateSelectionExpression": "",
                        "timeoutMilliseconds": 30000,
                        "tlsConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerVcsmPermissions",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVcsmFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVcsmCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "integrationType": [],
                        "integrationUri": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVcsmCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVcsmFunction"
                        ],
                        "payloadFormatVersion": []
                    },
                    "created": "2024-03-31T03:41:27.221084698Z",
                    "modified": "2024-03-31T03:41:27.221084698Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#683,25"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationVhbb",
                    "custom": true,
                    "id": "20isaw9",
                    "type": "aws:apigatewayv2/integration:Integration",
                    "inputs": {
                        "__defaults": [
                            "connectionType",
                            "passthroughBehavior"
                        ],
                        "apiId": "7a3gm3zph1",
                        "connectionType": "INTERNET",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "passthroughBehavior": "WHEN_NO_MATCH",
                        "payloadFormatVersion": "2.0"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "connectionId": "",
                        "connectionType": "INTERNET",
                        "contentHandlingStrategy": "",
                        "credentialsArn": "",
                        "description": "",
                        "id": "20isaw9",
                        "integrationMethod": "POST",
                        "integrationResponseSelectionExpression": "",
                        "integrationSubtype": "",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerVhbbFunction",
                        "passthroughBehavior": "",
                        "payloadFormatVersion": "2.0",
                        "requestParameters": {},
                        "requestTemplates": {},
                        "responseParameters": [],
                        "templateSelectionExpression": "",
                        "timeoutMilliseconds": 30000,
                        "tlsConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerVhbbPermissions",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVhbbFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVhbbCodeUpdater.sst.aws.FunctionCodeUpdater"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "integrationType": [],
                        "integrationUri": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerVhbbCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerVhbbFunction"
                        ],
                        "payloadFormatVersion": []
                    },
                    "created": "2024-03-31T03:41:32.873539794Z",
                    "modified": "2024-03-31T03:41:32.873539794Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#683,25"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/route:Route::SnapShareApiRouteMbkt",
                    "custom": true,
                    "id": "zz9bha3",
                    "type": "aws:apigatewayv2/route:Route",
                    "inputs": {
                        "__defaults": [
                            "apiKeyRequired"
                        ],
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationType": "NONE",
                        "routeKey": "GET /posts",
                        "target": "integrations/hbkwqo0"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationScopes": [],
                        "authorizationType": "NONE",
                        "authorizerId": "",
                        "id": "zz9bha3",
                        "modelSelectionExpression": "",
                        "operationName": "",
                        "requestModels": {},
                        "requestParameters": [],
                        "routeKey": "GET /posts",
                        "routeResponseSelectionExpression": "",
                        "target": "integrations/hbkwqo0"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationMbkt"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "authorizationType": [],
                        "routeKey": [],
                        "target": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationMbkt"
                        ]
                    },
                    "created": "2024-03-31T03:41:22.22960264Z",
                    "modified": "2024-03-31T03:41:22.22960264Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/apigatewayv2/route.ts#196,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/route:Route::SnapShareApiRouteEsbd",
                    "custom": true,
                    "id": "dqszxii",
                    "type": "aws:apigatewayv2/route:Route",
                    "inputs": {
                        "__defaults": [
                            "apiKeyRequired"
                        ],
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationType": "NONE",
                        "routeKey": "POST /register",
                        "target": "integrations/egpdvpq"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationScopes": [],
                        "authorizationType": "NONE",
                        "authorizerId": "",
                        "id": "dqszxii",
                        "modelSelectionExpression": "",
                        "operationName": "",
                        "requestModels": {},
                        "requestParameters": [],
                        "routeKey": "POST /register",
                        "routeResponseSelectionExpression": "",
                        "target": "integrations/egpdvpq"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationEsbd"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "authorizationType": [],
                        "routeKey": [],
                        "target": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationEsbd"
                        ]
                    },
                    "created": "2024-03-31T03:54:51.193577779Z",
                    "modified": "2024-03-31T03:54:51.193577779Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/apigatewayv2/route.ts#196,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/route:Route::SnapShareApiRouteMahf",
                    "custom": true,
                    "id": "zpdqwo6",
                    "type": "aws:apigatewayv2/route:Route",
                    "inputs": {
                        "__defaults": [
                            "apiKeyRequired"
                        ],
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationType": "JWT",
                        "authorizerId": "d4dfuy",
                        "routeKey": "DELETE /posts/{id}",
                        "target": "integrations/yjlyhpi"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationScopes": [],
                        "authorizationType": "JWT",
                        "authorizerId": "d4dfuy",
                        "id": "zpdqwo6",
                        "modelSelectionExpression": "",
                        "operationName": "",
                        "requestModels": {},
                        "requestParameters": [],
                        "routeKey": "DELETE /posts/{id}",
                        "routeResponseSelectionExpression": "",
                        "target": "integrations/yjlyhpi"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/authorizer:Authorizer::SnapShareApiAuthorizerUeta",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationMahf"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "authorizationType": [],
                        "authorizerId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/authorizer:Authorizer::SnapShareApiAuthorizerUeta"
                        ],
                        "routeKey": [],
                        "target": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationMahf"
                        ]
                    },
                    "created": "2024-03-31T03:42:04.607449549Z",
                    "modified": "2024-03-31T03:50:30.46901397Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/apigatewayv2/route.ts#196,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/route:Route::SnapShareApiRouteVcsm",
                    "custom": true,
                    "id": "nxp07o6",
                    "type": "aws:apigatewayv2/route:Route",
                    "inputs": {
                        "__defaults": [
                            "apiKeyRequired"
                        ],
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationType": "NONE",
                        "routeKey": "GET /posts/{id}",
                        "target": "integrations/tl7vsam"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationScopes": [],
                        "authorizationType": "NONE",
                        "authorizerId": "",
                        "id": "nxp07o6",
                        "modelSelectionExpression": "",
                        "operationName": "",
                        "requestModels": {},
                        "requestParameters": [],
                        "routeKey": "GET /posts/{id}",
                        "routeResponseSelectionExpression": "",
                        "target": "integrations/tl7vsam"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationVcsm"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "authorizationType": [],
                        "routeKey": [],
                        "target": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationVcsm"
                        ]
                    },
                    "created": "2024-03-31T03:41:27.562723799Z",
                    "modified": "2024-03-31T03:41:27.562723799Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/apigatewayv2/route.ts#196,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/route:Route::SnapShareApiRouteVhbb",
                    "custom": true,
                    "id": "f9zarcp",
                    "type": "aws:apigatewayv2/route:Route",
                    "inputs": {
                        "__defaults": [
                            "apiKeyRequired"
                        ],
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationType": "JWT",
                        "authorizerId": "d4dfuy",
                        "routeKey": "POST /posts",
                        "target": "integrations/20isaw9"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationScopes": [],
                        "authorizationType": "JWT",
                        "authorizerId": "d4dfuy",
                        "id": "f9zarcp",
                        "modelSelectionExpression": "",
                        "operationName": "",
                        "requestModels": {},
                        "requestParameters": [],
                        "routeKey": "POST /posts",
                        "routeResponseSelectionExpression": "",
                        "target": "integrations/20isaw9"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/authorizer:Authorizer::SnapShareApiAuthorizerUeta",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationVhbb"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "authorizationType": [],
                        "authorizerId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/authorizer:Authorizer::SnapShareApiAuthorizerUeta"
                        ],
                        "routeKey": [],
                        "target": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationVhbb"
                        ]
                    },
                    "created": "2024-03-31T03:41:33.243406709Z",
                    "modified": "2024-03-31T03:50:21.156460812Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/apigatewayv2/route.ts#196,9"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerNohfPermissions",
                    "custom": true,
                    "id": "SnapShareApiHandlerNohfPermissions-87010a5",
                    "type": "aws:lambda/permission:Permission",
                    "inputs": {
                        "__defaults": [
                            "statementId"
                        ],
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "principal": "apigateway.amazonaws.com",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerNohfPermissions-87010a5"
                    },
                    "outputs": {
                        "action": "lambda:InvokeFunction",
                        "function": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "id": "SnapShareApiHandlerNohfPermissions-87010a5",
                        "principal": "apigateway.amazonaws.com",
                        "qualifier": "",
                        "sourceArn": "arn:aws:execute-api:us-west-2:257033689941:7a3gm3zph1/*",
                        "statementId": "SnapShareApiHandlerNohfPermissions-87010a5",
                        "statementIdPrefix": ""
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerNohfFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerNohfCodeUpdater.sst.aws.FunctionCodeUpdater",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "action": [],
                        "function": [
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerNohfCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerNohfFunction"
                        ],
                        "principal": [],
                        "sourceArn": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ]
                    },
                    "created": "2024-03-31T03:42:09.452710203Z",
                    "modified": "2024-03-31T03:42:09.452710203Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#673,24"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationNohf",
                    "custom": true,
                    "id": "plb0gqg",
                    "type": "aws:apigatewayv2/integration:Integration",
                    "inputs": {
                        "__defaults": [
                            "connectionType",
                            "passthroughBehavior"
                        ],
                        "apiId": "7a3gm3zph1",
                        "connectionType": "INTERNET",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "passthroughBehavior": "WHEN_NO_MATCH",
                        "payloadFormatVersion": "2.0"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "connectionId": "",
                        "connectionType": "INTERNET",
                        "contentHandlingStrategy": "",
                        "credentialsArn": "",
                        "description": "",
                        "id": "plb0gqg",
                        "integrationMethod": "POST",
                        "integrationResponseSelectionExpression": "",
                        "integrationSubtype": "",
                        "integrationType": "AWS_PROXY",
                        "integrationUri": "arn:aws:lambda:us-west-2:257033689941:function:snapshare-michael-SnapShareApiHandlerNohfFunction",
                        "passthroughBehavior": "",
                        "payloadFormatVersion": "2.0",
                        "requestParameters": {},
                        "requestTemplates": {},
                        "responseParameters": [],
                        "templateSelectionExpression": "",
                        "timeoutMilliseconds": 30000,
                        "tlsConfig": null
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:lambda/permission:Permission::SnapShareApiHandlerNohfPermissions",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerNohfFunction",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerNohfCodeUpdater.sst.aws.FunctionCodeUpdater",
                        "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "integrationType": [],
                        "integrationUri": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$pulumi-nodejs:dynamic:Resource::SnapShareApiHandlerNohfCodeUpdater.sst.aws.FunctionCodeUpdater",
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$sst:aws:Function$aws:lambda/function:Function::SnapShareApiHandlerNohfFunction",
                            "urn:pulumi:michael::snapshare::sst:aws:Bucket$aws:s3/bucketV2:BucketV2::SnapshareAssetsBucket"
                        ],
                        "payloadFormatVersion": []
                    },
                    "created": "2024-03-31T03:42:09.736909297Z",
                    "modified": "2024-03-31T03:42:09.736909297Z",
                    "sourcePosition": "project:///../file:/home/michael/Documents/projects/snapshare/.sst/platform/src/components/aws/apigatewayv2.ts#683,25"
                },
                {
                    "urn": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/route:Route::SnapShareApiRouteNohf",
                    "custom": true,
                    "id": "ynem0j9",
                    "type": "aws:apigatewayv2/route:Route",
                    "inputs": {
                        "__defaults": [
                            "apiKeyRequired"
                        ],
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationType": "JWT",
                        "authorizerId": "d4dfuy",
                        "routeKey": "POST /signed-url",
                        "target": "integrations/plb0gqg"
                    },
                    "outputs": {
                        "apiId": "7a3gm3zph1",
                        "apiKeyRequired": false,
                        "authorizationScopes": [],
                        "authorizationType": "JWT",
                        "authorizerId": "d4dfuy",
                        "id": "ynem0j9",
                        "modelSelectionExpression": "",
                        "operationName": "",
                        "requestModels": {},
                        "requestParameters": [],
                        "routeKey": "POST /signed-url",
                        "routeResponseSelectionExpression": "",
                        "target": "integrations/plb0gqg"
                    },
                    "parent": "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2::SnapShareApi",
                    "dependencies": [
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/authorizer:Authorizer::SnapShareApiAuthorizerUeta",
                        "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationNohf"
                    ],
                    "provider": "urn:pulumi:michael::snapshare::pulumi:providers:aws::default_6_28_2::eb8977ec-fa5a-4f21-b0b3-64694dd0a61d",
                    "propertyDependencies": {
                        "apiId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/api:Api::SnapShareApiApi"
                        ],
                        "authorizationType": [],
                        "authorizerId": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/authorizer:Authorizer::SnapShareApiAuthorizerUeta"
                        ],
                        "routeKey": [],
                        "target": [
                            "urn:pulumi:michael::snapshare::sst:aws:ApiGatewayV2$aws:apigatewayv2/integration:Integration::SnapShareApiIntegrationNohf"
                        ]
                    },
                    "created": "2024-03-31T03:42:10.070014473Z",
                    "modified": "2024-03-31T03:50:48.463193188Z",
                    "sourcePosition": "project:///platform/node_modules/@pulumi/apigatewayv2/route.ts#196,9"
                }
            ]
        }
    }
}
